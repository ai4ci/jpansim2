---
title: "In host viral load model"
author: "Rob Challen"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
here::i_am("in-host-model.qmd")
library(tidyverse)

# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))

```

# Model desiderata

* Sensible viral peak in naive host that can be translated into a viral load PCR
measurement, with fairly predictable peak of virus, so we can determine a test
signal / noise parameter for sensitivity and specificity, and make the PCR
translation sensible.
* Viral peak related to infectiousness, and producing a typical latent period / 
infectious period / delay distribution for secondary infections.
* Tunable peak viral load and viral shedding duration.
* Some measure of severity that allows us to express risk of illness (e.g. symptoms,
hospitalisation, death) in terms of modelled quantities.
* Tunable host response to infection leading to different severity for given
viral challenge
* Ability to vaccinate individuals leading to less severe or lower viral peaks.
* Waning of immunity. Tunable.
* Secondary milder disease course, on second viral challenge.
* Complete elimination of infection possible (or stable very low level of virus).
* Chronic infection state possible.


```{r}
rendered = dtrackr::save_dot("
digraph { 
  subgraph cluster_virions {
    label = 'virions';
    V;
    VR [shape = point, width = 0];
    VR2 [shape = point, width = 0];
  }
  subgraph cluster_targets {
    label = 'target cells (T)';
    S;
    SE [shape = point, width = 0];
    E;
    ER [shape = point, width = 0];
    I;
    IR [shape = point, width = 0];
    R;
  }
  subgraph cluster_immunity {
    label = 'immunity (J)';
    D;
    DP [shape = point, width = 0];
    P;
    A;
  }
  S -> SE [ arrowhead = none ];
  SE -> E;
  E -> I;
  I -> IR [ arrowhead = none ];
  IR -> R;
  E -> ER [ arrowhead = none ];
  ER -> R;
  R -> S;
  D -> DP [ arrowhead = none ];
  DP -> P;
  P -> A;
  A -> D;
  I -> DP [ arrowhead = empty, style = 'dashed', constraint=false]; 
  V -> SE [ arrowhead = none]; 
  I -> V;
  V -> VR [ arrowhead = none ];
  VR -> VR2  [ arrowhead = odot ];
  A -> ER [ arrowhead = empty, style = 'dotted', constraint=false]; 
  A -> IR [ arrowhead = empty, style = 'dotted', constraint=false]; 
  A -> VR [ arrowhead = empty, style = 'dotted', constraint=false]; 
}
",tempfile())
knitr::include_graphics(rendered$paths$png)
```

# Compartments

$V$ is count of virions.

$T$ is total target cells, $S$, susceptible targets, $E$
is "exposed" targets (infected but not yet producing virus), $I$ is infected (
and producing virus), $R$, "removed" are target cells inactivated by immunity.


$J$ is the total number of immune cells, of which $D$ are dormant, $P$ are priming, and 
$A$ are active. 

$\alpha$ is the ratio of immune to target cells. This affects how effective the
immune system is at clearing the virus.


$$
\begin{align}
V \\
T &= S + E + I + R\\
J &= D + P + A\\
J &= \alpha T
\end{align}
$$

## Virions

$X_t$ is the time varying external viral exposure. $\beta_{neut}$ is a rate at
which virions are neutralised by the immune system, after which they are removed
from the system. $\beta_{inf}$ is a rate at which virions infect susceptible
target cells. $\beta_{rep}$ is a rate at which infected target cell replicate
virus.

$$
\begin{align}
\Delta V &= X_t + N_{IV} - N_{V-} - N_{VE} \\
p_{neut} &= 1-e^{-\beta_{neut}\frac{A}{J} } \\
p_{inf} &= 1-e^{-\beta_{inf}\frac{S}{T} } \\
N_{IV} &\sim Poisson( \beta_{rep} \times I ) \\
N_{V-} &\sim Binomial(V, p_{neut}) \\
N_{VE} &\sim Binomial(V-N_{V-}, p_{inf}) \\
\end{align}
$$

## Targets

$\beta_{recov}$ is a recovery rate of target cells, $\beta_{EI}$ is the rate 
"exposed" targets convert to "infected" cells which produce new virions. 
$\gamma$ is a relative probability of discovery of exposed cells compared to 
infected.

$$
\begin{align}
\Delta S &= N_{RS} - N_{SE} \\
\Delta E &= N_{SE} - N_{ER} - N_{EI}\\
\Delta I &= N_{EI} - N_{IR}\\
\Delta R &= N_{IR} - N_{RS}\\

p_{cell} &= 1-e^{-\beta_{neut}\frac{A}{T} } \\

N_{SE} &\sim Binomial( N_{VE} \bigg[ 1-\bigg(\frac{N_{VE}}{1+N_{VE}}\bigg)^S \bigg], p_{inf} ) \\
N_{RS} &\sim Binomial( R, 1-e^{-\beta_{recov}})\\



N_{ER} &\sim Binomial(E, \gamma \times p_{cell}) \\
N_{EI} &\sim Binomial(E-N_{ER}, 1-e^{-\beta_{EI}}) \\


N_{IR} &\sim Binomial(I, p_{cell}) \\


\end{align}
$$

## Immunity

$V_t$ is a time varying vaccination dose. $\beta_{induce}$ is the rate at which
exposed and infected targets. $\beta_{PA}$ is the rate at which primed immune 
cells transition to active. $\beta_{waning}$ is the rate at which active immune
cells become dormant.

$$
\begin{align}
\Delta D &= N_{AD} - N_{DP} - V_t \\
N_{DP} &\sim Binomial(D, 1-e^{-\beta_{induce} \frac{ E+I }{T}})\\
N_{AD} &\sim Binomial(A, 1-e^{-\beta_{waning}})\\
\Delta P &= N_{DP} + V_t - N_{PA} \\
N_{PA} &\sim Binomial(P, 1-e^{-\beta_{PA}})\\
\Delta P &= N_{PA} - N_{AD} \\
\end{align}
$$

# Stochastic model implementation

```{r}

stoch1 = odin.dust::odin_dust({
  
  
  # Initial state
  
  k_target = user(10000)
  ratio_immune_target = user(1)
  
  initial(virions) = 0
  
  initial(target_susceptible) = k_target
  initial(target_exposed) = 0
  initial(target_infected) = 0
  
  target_removed = k_target - (target_susceptible + target_exposed + target_infected)
  
  k_immune = ratio_immune_target * k_target
  initial(immune_priming) = 0
  initial(immune_active) = 0
  immune_dormant = k_immune - immune_priming - immune_active
  
  # Virions
  
  update(virions) = virions + virions_added - virions_neutralized - virions_infecting
  
  rate_infection = user(1)
  rate_virion_replication = user(4)
  rate_neutralization = rate_virion_replication
  
  p_neutralization = 1 - exp(- rate_neutralization * immune_active / k_immune)
  p_infection = 1 - exp(- rate_infection * target_susceptible / k_target)
  
  virions_added = rpois(rate_virion_replication * target_infected)
  virions_neutralized = rbinom(virions, p_neutralization)
  virions_infecting = rbinom(virions-virions_neutralized, p_infection)
  
  
  # Targets
  
  
  
  update(target_susceptible) = target_susceptible - target_newly_exposed + target_recovered
  update(target_exposed) = target_exposed + target_newly_exposed - target_exposed_removal - target_start_infected
  update(target_infected) = target_infected + target_start_infected - target_infected_removed
  
  rate_target_recovery = user(1/7)
  rate_infected_given_exposed = rate_virion_replication
  rate_cellular_removal = rate_neutralization
  
  
  # virions_infecting is a sample size and targets_susceptible is a pool size
  # coverage of the pool by repeated sampling with replacement is given by:
  # p_target_infected = 1-(1-1/target_susceptible)^virions_infecting
  # this is not a standard way of doing this 
  # because multiple viral particles can infect a single host but not vice versa
  # so a standard collision model is not applicable.
  # https://math.stackexchange.com/questions/32800/probability-distribution-of-coverage-of-a-set-after-x-independently-randomly/32816#32816
  target_interacted = virions_infecting * (1-(virions_infecting/(1+virions_infecting))^target_susceptible)
  target_newly_exposed = rbinom(target_interacted, p_infection)
  
  
  
  p_target_recovery = 1-exp(-rate_target_recovery)
  target_recovered = rbinom(target_removed, p_target_recovery)
  
  p_infected_given_exposed = 1-exp(-rate_infected_given_exposed)
  
  # p_target_cellular_removal = 1-exp(- rate_cellular_removal * immune_active / k_immune * ratio_immune_target)
  p_target_cellular_removal = 1-exp(- rate_cellular_removal * immune_active / k_target)
  
  
  p_propensity_chronic = user(0)
  
  target_exposed_removal = rbinom(target_exposed, (1-p_propensity_chronic) * p_target_cellular_removal)
  target_start_infected = rbinom(target_exposed-target_exposed_removal, p_infected_given_exposed)
  target_infected_removed = rbinom(target_infected, p_target_cellular_removal)
  
  
  # Immunity
  
  
  
  rate_priming_given_infected = user(1)
  rate_active_given_priming = rate_priming_given_infected
  rate_senescence_given_active = user(1/150)
  
  
  
  # immune_dormant = k_immune - immune_active
    
  p_priming_given_infected = 1-exp(-rate_priming_given_infected * (target_exposed+target_infected) / k_target)
  
  immune_start_priming = rbinom(immune_dormant, p_priming_given_infected)
  
  p_active_given_priming = 1-exp(-rate_active_given_priming)
  immune_start_active = rbinom(immune_priming, p_active_given_priming)

  update(immune_priming) = immune_priming + immune_start_priming - immune_start_active
      
  p_senescence_given_active = 1-exp(-rate_senescence_given_active)
  immune_senescence = rbinom(immune_active, p_senescence_given_active)
    
  update(immune_active) = immune_active + immune_start_active - immune_senescence
  
  
  
}, skip_cache = TRUE)
```

```{r}

step = function(mod,i, infectFn = \(.x) {if (.x %% 10 == 5) 2000 else 0}, vaccFn = \(.x) 0) {
  infectFn = rlang::as_function(infectFn)
  vaccFn = rlang::as_function(vaccFn)
  mod$run(i)
  
  s = mod$state()
  
  if (length(dim(s)) ==3) {
    inf = mod$info()[[1]]
    v = inf$index$virions
    p = inf$index$immune_priming
    
    s[v,,] = s[v,,] + infectFn(i)
    s[p,,] = s[p,,] + vaccFn(i)
    
  } else {
    
    inf = mod$info()
    v = inf$index$virions
    p = inf$index$immune_priming
    s[v,] = s[v,] + infectFn(i)
    s[p,] = s[p,] + infectFn(i)
    
  }
  
  mod$update_state(state = s)
  
  n = names(inf$index)
  
  if (length(dim(s))==2) dim(s) = c(dim(s),1)
  
  bind_rows(lapply( 1:(dim(s)[3]) , \(set) {
    stmp = s[,,set]
    tibble::tibble(
      value = as.vector(stmp),
      boot = as.vector(col(stmp)),
      variable = n[as.vector(row(stmp))],
      step = i,
      set=set
    )
  }))
}

full_params = function(mod = stoch1$new(pars=list(), n_particles = 10,time=0)) {
  sweepDf = mod$pars() %>% purrr::list_transpose() %>% as.data.frame()
  defaults = mod$param() %>% purrr::map(~ .x %>% purrr::pluck("default_value"))
  defaults = defaults %>% map(\(x) {
      if (!is.list(x)) return(x)
      x[[1]] = as.name(x[[1]])
      return(x %>% as.call() %>% eval())
  }) %>% as_tibble()
  if (nrow(sweepDf) > 0) {
    return(sweepDf %>% cross_join(defaults %>% select(-any_of(colnames(sweepDf)))))
  } else {
    return(defaults)
  }
}

sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399,...) {
  if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
  # pars = parsDf %>% purrr::transpose()
  pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
  
  mod <- stoch1$new(pars=pars, n_particles = 10,time=0,pars_multi = TRUE)
  step(mod,1)
  tmp = bind_rows(lapply(1:maxtime, \(i) step(mod,i,...)))
  full_params(mod) %>% inner_join(tmp, by="set")
}

plot_sweep = function(tmp, facets = ~variable) {
  
  tmp = tmp %>% 
    filter(variable %in% c("virions","target_susceptible","immune_active")) %>%
    group_by(across(-c(value,boot))) %>%
    summarise(value = mean(value))
  
  list(
  ggplot(tmp,aes(x=step-10,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
    geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
    guides(colour=guide_legend(position="bottom"))+
    facet_wrap(facets,scales = "free_y"),
  ggplot(tmp,aes(x=step-10,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
    geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
    facet_wrap(facets,scales = "free_y")+
    guides(colour=guide_legend(position="bottom"))+
    coord_cartesian(xlim=c(0,50))
  )
} 

full_params() %>% glimpse()
```

```{r}

tmp = sweep(parsDf = tibble(
  rate_virion_replication = seq(1,5,1)
))

tmp %>% plot_sweep()

```

## Host factors

```{r}

tmp = sweep(parsDf = tibble(
  
  ratio_immune_target = c(0.25,0.5,1,2,4), # << HOST FACTOR, duration and severity of disease, immune activity & peak of virions, can lead to chrnoic carrier state
  
  p_propensity_chronic = 0, #c(0,0.25, 0.5,0.75,1), # << HOST PROB CHRONIC
  
  rate_priming_given_infected = 1, #seq(0.7,1.3,0.1), # c(0.25,0.5,1,2,4,8), # severity roughly negatively linear with this. << HOST FACTOR, durantion, severity, and peak of virus, immunity fixed and no chrnoic disease effect
  
  rate_senescence_given_active = 1/150, #1/800,
  rate_target_recovery = 1/7, #1/c(1,3,7,15,30), # << HOST FACTOR, duration and severity of disease, no efffect on peak viral load ? useful for asymptomatics
))

tmp %>% plot_sweep(~variable)



```


## Viral factors

rate of virion replication defines how many viral copies are produced per 
infected cells and also how quickly exposed cells transition to infected.
It is a measure of how effiencetly the virus replicates once in the cell

```{r}

tmp = sweep(parsDf = tibble(
  
  # shortens GT? worsens severity
  rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  
))

tmp %>% plot_sweep(~variable)


tmp2 = sweep(parsDf = tibble(
  
  # shortens GT? worsens severity
  rate_virion_replication = c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = 1# c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  
))

tmp2 %>% plot_sweep(~variable)

```

The rate of infection defines how quickly virions enter cells. Things like 
spike protein mutations are likely to change this and this is the physiological 
candidate for a more infectious variant (although reduced efficiency of clearance could 
also a factor here).

```{r}
tmp = sweep(parsDf = tibble(
  
  # shortens GT? worsens severity
  rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  
))

tmp %>% plot_sweep(~variable)
```

## Peaks and phases

```{r}

tmp2 = sweep(parsDf = tibble(
  
  ratio_immune_target = 1, #c(0.25,0.5,1,2,4), # << HOST FACTOR, duration and severity of disease, immune activity & peak of virions, can lead to chrnoic carrier state
  
  # shortens GT? worsens severity
  rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = 1, #c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  rate_infected_given_exposed = 1, #rate_virion_replication, #rate_infection,
  
  rate_neutralization = rate_virion_replication * 1, #c(0.25,0.5,1,2,4),
  rate_cellular_removal = rate_neutralization, # * c(0.25,0.5,1,2,4),
  p_propensity_chronic = 0, #c(0,0.25, 0.5,0.75,1), # << HOST PROB CHRONIC
  
  rate_priming_given_infected = rnorm(50,1,0.1), # c(0.25,0.5,1,2,4,8), # severity roughly negatively linear with this. << HOST FACTOR, durantion, severity, and peak of virus, immunity fixed and no chrnoic disease effect
  rate_active_given_priming = rate_priming_given_infected, #* c(1,2,4,8), #c(0.5,1,2,4,8),
  
  rate_senescence_given_active = 1/150, #1/800,
  rate_target_recovery = 1/7, #1/c(1,3,7,15,30), # << HOST FACTOR, duration and severity of disease, no efffect on peak viral load ? useful for asymptomatics
))

# tmp2 %>% glimpse()

tmp3 = tmp2 %>% 
  filter(variable %in% c("virions","target_susceptible","immune_active")) %>%
  mutate(phase = (step %/% 100)+1) %>%
  group_by(across(-c(step,value,boot))) %>%
  summarise(
    peak = max(value),
    minima = min(value)
  ) %>%
  glimpse()

ggplot(tmp3 %>% filter(variable == "virions", phase == 1))+
  geom_density(aes(x=peak, colour=as.factor(phase)))+
  facet_wrap(~variable,scales="free")
  

lm(peak ~ rate_priming_given_infected, tmp3 %>% filter(variable == "virions", phase == 1))
lm(peak ~ rate_priming_given_infected, tmp3 %>% filter(variable == "virions", phase == 4))

# ggplot(tmp3)+
#   geom_density(aes(x=as.factor(set), ymin=minima,ymax=peak))+
#   geom_errorbar(aes(x=as.factor(set), ymin=minima,ymax=peak))+
#   facet_wrap(~variable,scales="free_x")

```


# Supporting rationale

## Signal to noise, sensitivity and specificiy

Viral load is normalised so that a value of 1 is infected and should be
detected at the sensitivity and specificity of the tests. This is to do
with the ease of separating signal from noise. The noise distribution 
upper quantile at a test cut off must be equal to specificity.
at the same test cut off the lower quantile of the signal distribution must
be equal to sensitivity. 

Problem is we don;t know anything about the signal distribution. and it 
is somewhat arbitrary because it is a circular definition, if we impose
a cut-off. This comes down to
how we normalise viral load. 

A cut off of 1 has to be designed that 
noise distribution quantile (spec)% is 1, and 1+noise distribution quantile
is (1-sens)% at 1. If we assume a uniform distributed additive noise 
function we can phrase this in 

$$
E \sim Uniform(min,max) \\
P(E \geq 1) = specificity \\
P(1+E \leq 1) = 1-sensitivity \\
P(E \leq 0) = 1-sensitivity \\



$$

I.e. the (1-sensitivity)% quantile is 0 and the (specificity)% quantile is 1. 
The CDF of this Uniform distribution is a linear function with gradient and 
intercept:

$$

CDF(x) = (specificity + sensitivity - 1) \times x + (1-sensitivity) \\

CDF(min) = 0 \\
(specificity + sensitivity - 1) \times min + (1-sensitivity) = 0 \\
min = \frac{sensitivity-1}{specificity + sensitivity - 1} \\

CDF(max) = 1 \\
(specificity + sensitivity - 1) \times max + (1-sensitivity) = 1 \\
max = \frac{sensitivity}{specificity + sensitivity - 1}

$$

```{r}

sensitivity = 0.8
specificity = 0.95

min = (sensitivity-1)/(specificity + sensitivity - 1) 
max = (sensitivity)/(specificity + sensitivity - 1)

# sens
sum(runif(10000,min,max)+1 > 1)/10000

# spec
sum(runif(10000,min,max) < 1)/10000
```

Easier to transform a 0,1 Uniform using sensitivity and specificity

```{r}

noise = (runif(10000)-(1-sensitivity)) / (sensitivity+specificity-1)

# sens 
sum(1 + noise > 1)/10000

# spec
sum( noise < 1)/10000

```


## Conversions

rate to probability
	
$$
p = 1-e^{-rate}\\
rate = -ln(1-p)
$$

```{r}
p = 0.1 #seq(0,1,0.1)
rate = -log(1-p)

p2 = 1-exp(-rate*c(1,2,4,8,16))
rate2 = -log(1-p2)

rate2/rate

```


$$

period \\
0.5 = p^{period} \\
log(0.5) = period \times log(p) \\
p = e^\frac{log(0.5)}{period}

$$


```{r}
# half life
period = 7
p = exp(log(0.5)/period)
p^7
```

# Scaling probabilities

```{r}
logit = function(p) {return(log(p/(1-p)))}
expit = function(x) {return(1/(1+exp(-x)))}

OR = 2
p = seq(0.1,0.9,0.1)

scaled_p = expit(logit(p) + log(OR))

# scaled_p2 = 1-((1-p)^OR)

p/(1-p)
scaled_p/(1-scaled_p)
# scaled_p2/(1-scaled_p2)
```

```{r}
# If we need to reduce the effect of a modifier on the logit scale we can simply
# multiply by the factor. This is equivalent to multiplying the 
# odds by the (odds_ratio ^ factor)

# if this is a number of days then a 1/(1+period) is going to be the factor
# we use 

b = expit(logit(0.01) + seq(-1,1,0.1))

a = expit(logit(0.01) + seq(-1,1,0.1) * 0.5)

```

### Logit normal distributions.

Standard deviation of logit normal distribution is not easy to specify
It would be useful to parametrise using mean and SD. There is a simple relationship
between median and mu. scale parameter not so easy though.

```{r}
median = seq(0.025,0.975,0.05)
scale = 0.1
mu = logit(median);
#sigma = scale*(exp((abs(mu)^(3/4))))

sigma = scale*(2+(abs(mu)^(7/4)))

tmp = bind_rows(lapply(seq_along(mu), \(i) tibble::tibble(
  q = seq(0.01,0.99,0.01),
  x = expit(qnorm(p = seq(0.01,0.99,0.01))*sigma[i]+mu[i]),
  p = (q-lag(q))/(x-lag(x)),
  median = expit(mu[i])          
)))

ggplot(tmp,aes(x=x,y=p,colour=as.factor(median)))+geom_line()

tmp2 = tmp %>% group_by(median) %>%
  mutate(dx=x-lag(x)) %>%
  summarise(
    mean = sum(x*p*dx,na.rm = TRUE),
    sd = sum((x-mean)^2*p*dx,na.rm = TRUE)
  )

ggplot(tmp2,aes(x=median,y=mean))+geom_point()
ggplot(tmp2,aes(x=median,y=sd))+geom_point()
```



## Convex Beta distributions

Mode if alpha and beta are >1 otherwise turns into u shaped distribution

$$
\alpha = (\frac{\mu(1-\mu)}{\sigma^2}-1) \mu \\
\beta = (\frac{\mu(1-\mu)}{\sigma^2}-1) (1-\mu) \\
$$

$$

1 < (\frac{\mu(1-\mu)}{\sigma^2}-1) \mu \\
\frac{1}{\mu}+1 < \frac{\mu(1-\mu)}{\sigma^2} \\
\frac{1+\mu}{\mu} < \frac{\mu(1-\mu)}{\sigma^2} \\
\sigma^2 < \mu^2\frac{1-\mu}{1+\mu} \\

$$

$$

1 < (\frac{\mu(1-\mu)}{\sigma^2}-1) (1-\mu) \\
\frac{1}{1-\mu}+1 < \frac{\mu(1-\mu)}{\sigma^2}  \\
\frac{2-\mu}{1-\mu} < \frac{\mu(1-\mu)}{\sigma^2}  \\
{\sigma^2} < (1-\mu)^2\frac{\mu}{2-\mu} \\
$$



```{r}

mu = 0.995

sigma = sqrt(pmin(
  mu^2*(1-mu)/(1+mu),
  (1-mu)^2*(mu)/(2-mu)
))

# regardless of mu one of alpha or beta should be equal to 1.

alpha = (mu*(1-mu) / sigma^2 -1) * mu
beta = (mu*(1-mu) / sigma^2 -1) * (1-mu)

```





# Output of ABM.

```{r}
linelist = readr::read_csv("~/tmp/linelist.csv")
ggplot(linelist,aes(x=time,y=normalisedViralLoad,group=personId))+geom_line(alpha=0.01)
ggplot(linelist %>% group_by(time) %>% summarise(virionExposure=mean(virionExposure)),aes(x=time,y=virionExposure))+geom_line()

ggplot(linelist,aes(x=time,y=probabilityInfectiousToday))+geom_point(alpha=0.1)
ggplot(linelist,aes(x=probabilityInfectiousToday,y=normalisedViralLoad))+geom_point(alpha=0.1)

ggplot(linelist %>% group_by(time) %>% summarise(presumedLocalPrevalence=mean(presumedLocalPrevalence)),aes(x=time,y=presumedLocalPrevalence))+geom_line()


ggplot(linelist %>% filter(virionExposure > 0))+geom_density(aes(x=virionExposure))
ggplot(linelist %>% filter(normalisedSeverity > 0) %>% group_by(personId) %>% summarise(normalisedSeverity = max(normalisedSeverity)))+geom_density(aes(x=normalisedSeverity))

ggplot(linelist,aes(x=time,fill=as.factor(behaviour),colour=as.factor(behaviour)))+geom_bar()

linelist %>% group_by(behaviour) %>% count()
```


```{r}
summary = readr::read_csv("~/tmp/summary.csv")
ggplot(summary,aes(x=time,y=incidence))+geom_line()
ggplot(summary,aes(x=time,y=infectedCount/10000))+geom_line()+ylab("actual prevalence")
ggplot(summary,aes(x=time,y=averageMobility))+geom_line()
ggplot(summary,aes(x=time,y=averageCompliance))+geom_line()
ggplot(summary,aes(x=time,y=presumedTestPositivePrevalence))+geom_line()
ggplot(summary,aes(x=time,y=testPositives))+geom_line()
ggplot(summary,aes(x=time,y=testNegatives))+geom_line()
ggplot(summary,aes(x=time,y=testPositives/(testPositives+testNegatives)))+geom_line()

ggplot(summary,aes(x=time,fill=as.factor(policy),colour=as.factor(policy),y=1))+geom_bar(stat="identity")

summary %>% group_by(policy) %>% count()
```