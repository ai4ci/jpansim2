---
  title: "ABM output"
author: "Rob Challen"
date: "`r Sys.Date()`"
output: html_document
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
here::i_am("abm-output.qmd")
library(tidyverse)
library(gganimate)

.gg_pedantic()

# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))

``` 
  
  # Output of ABM.


```{r}

behaviours = readr::read_csv("~/tmp/behaviours.csv")
summary = readr::read_csv("~/tmp/summary.csv")
demog = readr::read_csv("~/tmp/demog.csv")
```

```{r}
ggplot(behaviours,aes(x=time, y=count, fill=as.factor(behaviour),colour=as.factor(behaviour)))+geom_bar(stat="identity")+facet_wrap(~experimentName,scales = "free_y")
```



```{r}
# tmp = linelist %>% group_by(contactCount,modelName,experimentName) %>% count()
# ggplot(tmp,aes(x=contactCount, y=n/sum(n),colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p") + scale_y_continuous(trans="log1p")


tmp = linelist %>% 
  group_by(modelName,experimentName,contactCount) %>% count() %>%
  group_by(modelName,experimentName) %>%
  mutate(y = n/sum(n))

ggplot(tmp,aes(x=contactCount, y=y,colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p") + scale_y_continuous(trans="log1p")

  
# ggplot(tmp,aes(x=time, y=contactCount, fill=n/sum(n),colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p") + scale_y_continuous(trans="log1p")

tmp = linelist %>% 
  group_by(modelName,experimentName,time,contactCount) %>% count() %>%
  group_by(modelName,experimentName,time) %>%
  mutate(dens = n/sum(n))

# ggplot(tmp,aes(x=time, y=contactCount, z=dens, group=interaction(modelName,experimentName) )) + geom_contour(bins = 10) + facet_wrap(~experimentName)
# ggplot(tmp,aes(x=time, y=contactCount, group=interaction(modelName,experimentName) )) + geom_density2d() + facet_wrap(~experimentName)

```


```{r}
ggplot(linelist,aes(x=time,y=normalisedViralLoad,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)
ggplot(linelist %>% group_by(time,experimentName) %>% summarise(contactExposure=mean(contactExposure)),aes(x=time,y=contactExposure,colour = experimentName))+geom_line()

# ggplot(linelist,aes(x=time,y=probabilityInfectiousToday))+geom_point(alpha=0.1)+facet_wrap(~experimentName)
# ggplot(linelist,aes(x=probabilityInfectiousToday,y=normalisedViralLoad))+geom_point(alpha=0.1)

# ggplot(linelist,aes(x=probabilityInfectiousToday,fill=infectious))+geom_density(alpha=0.4)+facet_wrap(~experimentName,scales = "free_y")
# ggplot(linelist,aes(x=probabilityInfectiousToday,fill=symptomatic))+geom_density(alpha=0.4)+facet_wrap(~experimentName,scales = "free_y")



ggplot(linelist %>% filter(contactExposure > 0))+geom_density(aes(x=contactExposure, colour=experimentName))


ggplot(linelist %>% filter(normalisedViralLoad > 0) %>% group_by(personId,experimentName) %>% summarise(normalisedViralLoad = max(normalisedViralLoad)))+geom_density(aes(x=normalisedViralLoad, colour=experimentName))

ggplot(linelist,aes(x=time,fill=as.factor(behaviour),colour=as.factor(behaviour)))+geom_bar()+facet_wrap(~experimentName,scales = "free_y")

linelist %>% group_by(behaviour) %>% count()
```

```{r}
prev_summary = linelist %>% group_by(time,experimentName) %>% summarise(
  meanPresumedLocalPrevalence=mean(presumedLocalPrevalence),
  meanTrueLocalPrevalence = mean(trueLocalPrevalence)
)

ggplot(prev_summary,aes(x=time,colour = experimentName))+
  geom_line(aes(y=meanPresumedLocalPrevalence))+
  geom_line(aes(y=meanTrueLocalPrevalence), linetype="dotted")+
  geom_line(data = summary,aes(x=time,y=prevalence), linetype="dashed")

ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
  geom_line(data = prev_summary,aes(x=time,y=meanPresumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
  geom_line(data = summary,aes(x=time,y=prevalence, colour=experimentName), inherit.aes = FALSE, colour = "red", linetype="dashed")


ggplot(linelist, aes(x=presumedLocalPrevalence, y=trueLocalPrevalence))+geom_point(alpha=0.1,size=0.1)

ggplot(linelist, aes(x=logOddsInfectiousToday, y=trueLocalPrevalence))+geom_point(alpha=0.1,size=0.1)
# ggplot(linelist,aes(x=probabilityInfectiousToday, colour=infectious))+geom_density()
```

```{r}

cutoffs = readr::read_csv("~/tmp/debug.csv")

maxSeverity = linelist %>% group_by(personId,modelName,experimentName) %>% summarise(
  infectious = any(infectious),
  normalisedSeverity = max(normalisedSeverity)
) %>% filter(infectious)

maxSeverity %>% inner_join(cutoffs) %>% group_by(modelName,experimentName) %>% summarise(
  infectionCaseRatio = sum(normalisedSeverity>=severitySymptomsCutoff)/n(),
  infectionHospitalisationRatio = sum(normalisedSeverity>=severityHospitalisationCutoff)/n(),
  infectionFatalityRatio = sum(normalisedSeverity>=severityDeathCutoff)/n()
) %>% mutate(
  caseFatalityRatio = infectionFatalityRatio / infectionCaseRatio,
  caseHospitalisationRatio = infectionHospitalisationRatio / infectionCaseRatio,
)


ggplot(maxSeverity)+geom_density(aes(x=normalisedSeverity, colour=experimentName, group = interaction(modelName,experimentName)))+
  geom_vline(data=cutoffs,aes(colour = experimentName, xintercept=severitySymptomsCutoff))+
  geom_vline(data=cutoffs,aes(colour = experimentName, xintercept=severityHospitalisationCutoff), linetype="dashed")+
  geom_vline(data=cutoffs,aes(colour = experimentName, xintercept=severityDeathCutoff), linetype="dotted")+facet_wrap(~experimentName,ncol=1,scales = "free_y")

```


```{r}

ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line(alpha=0.25)
ggplot(summary,aes(x=time,y=cumulativeInfections, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=symptomaticCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=hospitalisedCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeDeaths, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=infectedCount/10000, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()+ylab("actual prevalence")
ggplot(summary,aes(x=time,y=averageMobility, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=averageCompliance, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=presumedTestPositivePrevalence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testNegativesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate/(testPositivesByResultDate+testNegativesByResultDate), colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=rtEffective, colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()+coord_cartesian(ylim=c(0,5))

ggplot(summary,aes(x=time,fill=as.factor(policy),colour=as.factor(policy),y=1))+geom_bar(stat="identity")+facet_wrap(~interaction(experimentName,experimentReplica))

summary %>% group_by(policy) %>% count()
```



```{r}

# ip = ggoutbreak::make_gamma_ip(median_of_mean = 7, median_of_sd = 4)
ip = readr::read_csv("~/tmp/ip.csv")
ip = ip %>% mutate(boot = as.integer(as.factor(experimentName))) %>% group_by(boot,tau) %>%
  summarise(probability = mean(probability))

summary2 = summary %>% mutate(
    time = ggoutbreak::as.time_period(time, unit="1 day"),
    count = incidence) %>%
    group_by(experimentName,experimentReplica)

estimate = summary2 %>%
  ggoutbreak::poisson_locfit_model() %>%
  ggoutbreak::rt_from_incidence(ip)
  

summary2 %>% ggoutbreak::plot_counts(mapping = aes(colour=experimentName, group=interaction(experimentName,experimentReplica)))
estimate %>% ggoutbreak::plot_growth_rate(mapping = aes(colour=experimentName,group=interaction(experimentName,experimentReplica)))+coord_cartesian(ylim=c(-0.2,0.2))
estimate %>% ggoutbreak::plot_rt(mapping = aes(colour=experimentName,group=interaction(experimentName,experimentReplica))) +
  geom_point(data = summary,aes(x=as.Date(ggoutbreak::as.time_period(time, unit="1 day")),y=rtEffective, colour=experimentName))+
  coord_cartesian(ylim=c(0,4))

```


```{r}

ggplot(demog,aes(x=age))+geom_density()
ggplot(demog,aes(x=age,y=mobilityBaseline))+geom_point(alpha=0.1)

ggplot(demog,aes(x=hilbertX,y=hilbertY))+geom_tile()
```

```{r}
contacts = readr::read_csv("~/tmp/contacts.csv")
contacts %>% glimpse()

expected = demog %>% mutate(age = floor(age)) %>% group_by(age) %>%
  summarise(
    count = n()
  ) %>% 
  mutate(
    density = count/sum(count)
  )

expected = expected %>% cross_join(expected %>% rename_with(.fn = ~ paste0("contact",stringr::str_to_title(.x)))) %>%
  mutate(expected = density*contactDensity*nrow(contacts))

contact_matrix = contacts %>% 
  select(id,contactId) %>% 
  inner_join(demog %>% select(age,id), by="id") %>%
  inner_join(demog %>% select(contactAge = age,contactId=id), by="contactId") %>%
  mutate(age = floor(age), contactAge=floor(contactAge)) %>%
  group_by(age,contactAge) %>%
  count()

tmp = contact_matrix %>% inner_join(expected %>% select(age,contactAge,expected), by = join_by(age, contactAge)) %>%
  mutate(contactRR = n/expected)

ggplot(tmp, aes(x=age,y=contactAge,fill=contactRR))+geom_tile()+scale_fill_viridis_c(limits=c(0.5, 2), oob=scales::squish)

```


```{r}
settings = jsonlite::fromJSON("~/tmp/result-settings.json")
settings$executionConfiguration$rO

```


```{r}
snap = linelist %>% inner_join(demog, by=join_by(experimentName,modelName,experimentReplica,modelReplica,personId==id))

ggplot(snap,aes(x=hilbertX,y=hilbertY))+
  geom_tile(aes(fill=probabilityInfectiousToday))+
  geom_point(data = snap %>% filter(infectious), aes(colour=infectious),size=0.5)+
  facet_wrap(~experimentName)+
  transition_time(time = time)+
  ggtitle('{frame}/{nframes}')


t=100
ggplot(snap %>% filter(time==t),aes(x=hilbertX,y=hilbertY))+
  geom_tile(aes(fill=probabilityInfectiousToday))+
  facet_wrap(~experimentName)+
  geom_point(data = snap %>% filter(infectious & time==t), aes(colour=infectious),size=0.5)

```


```{r}
final_state = readr::read_csv("~/tmp/test1/final-state.csv")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumHospitalBurden))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumIncidence))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumPrevalence))+theme(axis.text.x = element_text(angle=15,hjust=1))

ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))+geom_hline(yintercept=128*128,linetype="dashed")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeAdmissions))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeDeaths))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeMobilityDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state %>% filter(cumulativeComplianceDecrease > 0),aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeComplianceDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))

ggplot(final_state %>% filter(cumulativeComplianceDecrease > 0),aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeComplianceDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))

```