---
  title: "ABM output"
author: "Rob Challen"
date: "`r Sys.Date()`"
output: html_document
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
here::i_am("abm-output.qmd")
library(tidyverse)
library(gganimate)
library(ggpp)

.gg_pedantic(fontSize = 24,lineSize = 1,
             legend.key.size = ggplot2::unit(1, "lines"),
             axis.text = element_text(margin = margin(0,0,0,0))
)

choose_directory = function(caption = 'Select data directory') {
  if (exists('utils::choose.dir')) {
    choose.dir(caption = caption) 
  } else {
    tcltk::tk_choose.dir(caption = caption)
  }
}

directory = "~/tmp/test"

if (!exists("directory")) directory = choose_directory()

# tmp = load_csvs(directory,"ip")
# urns = c("default","trigger:5%to1%:isolation:mild","trigger:10%to2%:isolation:moderate")
# urns = tmp$experimentName

split_urn = function(urns) {
  bind_rows(lapply(stringr::str_split(urns,":"), \(x) {
    values = x[c(FALSE,TRUE)]
    # deal with default values
    if (length(x) < 2) return(NULL)
    names(values) = x[c(TRUE,FALSE)]
    return(as_tibble(as.list(values)))
  }))
}

urn_groups = function(urns) {
  unique(unlist(lapply(stringr::str_split(urns,":"), \(x) if (length(x) < 2) character() else x[c(TRUE,FALSE)])))
}

per_execution = c("modelName","modelReplica","experimentName","experimentReplica")

try_mutate = function(df,...) {
  out = try({
    df %>% mutate(...)
  },silent = TRUE)
  if (is.data.frame(out)) return(out)
  if (class(out)=="try-error") return(df)
  return(out)
}

load_csvs = function(directory, type = c("summary","contact-counts","ip","behaviours","final-state","test-positivity","debug")) {
  type = match.arg(type)
  files = fs::dir_ls(directory, recurse = TRUE)
  files = files[stringr::str_ends(files,paste0(type,".csv"))]
  listData = lapply(files, readr::read_csv, show_col_types = FALSE)
  listData = purrr::keep(listData, ~ nrow(.x) > 0)
  loaded = .cached(
    dplyr::bind_rows(listData) %>% 
      try_mutate(split_urn(modelName)) %>% 
      try_mutate(split_urn(experimentName)) %>% 
      group_by(across(any_of(c(per_execution,urn_groups(.$modelName), urn_groups(.$experimentName))))),
    files,
    fs::file_info(files)$modification_time
  )
  return(loaded)
}

sanitise = function(strings) {
  strings = stringr::str_replace_all(strings, "([A-Z][a-z])", " \\1")
  strings = stringr::str_replace_all(strings, "_", " ")
  strings = stringr::str_replace_all(strings, "\\s+", " ")
  strings = stringr::str_to_lower(strings)
  strings = trimws(strings)
  return(strings)
}

# sanitise(c("CamelCase","CAMEL_CASE","variable_test"))


# urn_groups(tmp$experimentName)
# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))

``` 
  
# Load data

```{r}

directory = "/home/vp22681/Data/ai4ci/lockdown-compliance/"

behaviours = load_csvs(directory, "behaviours")
summary = load_csvs(directory, "summary")
ip = load_csvs(directory, "ip")
final = load_csvs(directory, "final-state")
contacts = load_csvs(directory, "contact-counts")
test_pos = load_csvs(directory, "test-positivity")
debug_params = load_csvs(directory, "debug")

configFiles = fs::dir_ls(directory, recurse = TRUE,glob = "*result-settings.json")
config = bind_rows(lapply(configFiles, jsonlite::fromJSON)) %>% 
      try_mutate(split_urn(modelName)) %>% 
      try_mutate(split_urn(experimentName)) %>% 
      group_by(across(any_of(c(per_execution,urn_groups(.$modelName), urn_groups(.$experimentName)))))

config %>% glimpse()
```

## Infection time series

```{r}

summary = load_csvs(directory, "summary")
summary = summary %>% filter(
    trigger %in% c("none","5%-1%")
  ) %>% 
  mutate(
    trigger = factor(ifelse(trigger=="none","no lockdown","lockdown"),levels=c("no lockdown","lockdown")),
    isolation =factor(isolation,levels=c("none","mild","moderate","severe"))
  )

multipleTs = summary %>% n_groups() > 1

groupedAes = aes(x=time, group=interaction(modelName,modelReplica,experimentName,experimentReplica))

showLockdown = any(config %>% unnest(executionConfiguration) %>% pull(defaultPolicyModelName) == "ReactiveLockdown")
nReplicas = length(unique(summary$modelReplica))*length(unique(summary$experimentReplica))
alphaLine = 1/(1+nReplicas/2)

lockdownBackground = function(showTriggers = FALSE, replicas = nReplicas) {
  # nExecutions = nrow(config)
  if (showLockdown) {
    triggers = config %>% unnest(executionConfiguration) %>% select(lockdownReleaseTrigger, lockdownStartTrigger, r0)
    tmp = list(
      geom_rect(data = summary, aes(!!!groupedAes, xmin=time-0.5,xmax=time+0.5,fill=policy),ymin=-Inf,ymax=Inf,alpha=1/replicas)
    )
    if (showTriggers) {
      tmp = c(tmp,
            geom_hline(data=triggers,aes(yintercept=lockdownStartTrigger), linetype = "dashed"),
            geom_hline(data=triggers,aes(yintercept=lockdownReleaseTrigger), linetype = "dotted")
      )
    }
  } else {
    tmp = list()
  }
  tmp = c(tmp,scale_x_continuous(expand=c(0,0)))
  return(tmp)
}

# Trigger value
triggerValue = stringr::str_to_lower(stringr::str_replace_all(unique(config$executionConfiguration$lockdownTriggerValue),"_"," "))

if ((length(unique(summary$lockdownTrigger))>1) && showLockdown) {
  pTrigger = ggplot(summary,groupedAes) + 
    lockdownBackground(showTriggers=TRUE)+
    geom_line(aes(y=lockdownTrigger),alpha=alphaLine)+
    ylab(triggerValue)+.gg_narrow()+.gg_hide_legend()+
    coord_cartesian()
    .gg_scale_y_percent()
} else {
  pTrigger = NULL
}

pTrigger+
  facet_grid(trigger~isolation)+
  scale_fill_manual(values = c(NoControl.DEFAULT="white", ReactiveLockdown.LOCKDOWN="#FF6000",  ReactiveLockdown.MONITOR="lightcyan"))



# incidence
pIncidence = ggplot(summary,groupedAes) + 
  lockdownBackground()+
  geom_line(aes(y=incidence),alpha=alphaLine)+
  coord_cartesian(ylim=c(0,NA))+.gg_narrow()+.gg_hide_legend()




pTruePrevalence = ggplot(
      summary %>% inner_join(config %>% unnest(setupConfiguration) %>% unnest(network) %>% select(networkSize)),
      groupedAes
    )+
    lockdownBackground()+
    geom_line(aes(y=infectedCount/networkSize),alpha=alphaLine)+
    ylab("actual prevalence")+
    .gg_scale_y_percent()+.gg_narrow()+.gg_hide_legend()

pRt = ggplot(summary,groupedAes)+
  lockdownBackground()+ 
  geom_line(aes(y=rtEffective),alpha=alphaLine)+
  geom_hline(yintercept=1, colour="grey30")+
  geom_hline(data=config %>% unnest(executionConfiguration) %>% select(r0), mapping = aes(yintercept=r0), linetype = "dotted")+
  coord_cartesian(ylim=c(0,5))+.gg_narrow()+.gg_hide_legend()

if ((length(unique(summary$averageMobility))>1)) {
  pMobility = ggplot(summary,groupedAes) + 
    lockdownBackground()+
    geom_line(aes(y=averageMobility),alpha=alphaLine)+
    coord_cartesian(ylim=c(0,NA))+.gg_narrow()+.gg_hide_legend()
} else {
  pMobility = NULL
}

if ((length(unique(summary$averageCompliance))>1)) {
  pCompliance = ggplot(summary,groupedAes) + 
    lockdownBackground()+
    geom_rect(aes(xmin=time-0.5,xmax=time+0.5,fill=policy),ymin=-Inf,ymax=Inf,alpha=0.2) +
    geom_line(aes(y=averageCompliance),alpha=alphaLine)+
    coord_cartesian(ylim=c(0,NA))+.gg_narrow()+.gg_hide_legend()
} else {
  pCompliance = NULL
}


## .gg_save_as(p, fs::path(directory,"summary1.png"),size = std_size$full)

popSize = config %>% unnest(setupConfiguration) %>% unnest(network) %>% select(networkSize)

UKBedsPer1000 = 2.4
GermanyBedsPer1000 = 7.8

pOutbreakSize = ggplot(summary,groupedAes) + 
    lockdownBackground()+
    geom_line(aes(y=cumulativeInfections),alpha=alphaLine)+
    coord_cartesian(ylim=c(0,NA))+.gg_narrow()+.gg_hide_legend()+
    geom_hline(data=popSize,aes(yintercept=networkSize),linetype="dashed")+
    ylab("total infections")

pDeaths = ggplot(summary,groupedAes) + 
    lockdownBackground()+
    geom_line(aes(y=cumulativeDeaths),alpha=alphaLine)+
    coord_cartesian(ylim=c(0,NA))+.gg_narrow()+.gg_hide_legend()+
    ylab("deaths")

pHospitalBurden = ggplot(summary,groupedAes) + 
    lockdownBackground()+
    geom_line(aes(y=hospitalisedCount),alpha=alphaLine)+
    coord_cartesian(ylim=c(0,NA))+.gg_narrow()+.gg_hide_legend()+
    # geom_hline(data=popSize,aes(yintercept=networkSize/1000*UKBedsPer1000),linetype="dashed")+
    # geom_hline(data=popSize,aes(yintercept=networkSize/1000*GermanyBedsPer1000),linetype="dotted")+
    ylab("hospital occupancy")
```


```{r}
pX = pIncidence+
  facet_grid(trigger~isolation)+
  scale_fill_manual(values = c(NoControl.DEFAULT="white", ReactiveLockdown.LOCKDOWN="#FF6000",  ReactiveLockdown.MONITOR="lightcyan"))

pY = pOutbreakSize +
  facet_grid(trigger~isolation)+
  scale_fill_manual(values = c(NoControl.DEFAULT="white", ReactiveLockdown.LOCKDOWN="#FF6000",  ReactiveLockdown.MONITOR="lightcyan"))

pXY = pX+pY+patchwork::plot_layout(ncol=1, axes = "collect")+patchwork::plot_annotation(tag_levels = "A")
# ggplot(summary,groupedAes)+geom_line(aes(y=symptomaticCount, colour=experimentName))

.gg_save_as(pX, maxWidth = 15, maxHeight = 8, filename="~/tmp/p1.png")

```

```{r}

tableData = config %>% 
    unnest(setupConfiguration, names_sep = ".") %>% 
    unnest(setupConfiguration.network, names_sep = ".") %>% 
    unnest(executionConfiguration, names_sep = ".") %>%
    unnest(executionConfiguration.complianceProbability, names_sep = ".") %>%
    unnest(executionConfiguration.appUseProbability, names_sep = ".") %>% 
  ungroup %>%
  transmute(
    model=modelName,
    simulation=experimentName,
    population=setupConfiguration.network.networkSize,
    behaviour=sanitise(executionConfiguration.defaultBehaviourModelName),
    policy=sanitise(executionConfiguration.defaultPolicyModelName),
    R0 = executionConfiguration.r0,
    networkType=sanitise(`setupConfiguration.network.@type`)
  ) %>%
  distinct() %>%
  glimpse()

pConfig = ggplot2::ggplot(tibble(x = 0, y = 0, tb = list(tableData)))+
  ggpp::geom_table(aes(x=x,y=y,label=tb),table.theme = ttheme_gtplain(base_size = 18))+
  theme_void()


# p = 
  patchwork::wrap_plots(list(
    pTrigger,
    pIncidence,
    pTruePrevalence,
    pRt,
    pMobility,
    pCompliance,
    pOutbreakSize,
    pDeaths,
    pHospitalBurden,
    pConfig
  ) %>% purrr::discard(~is.null(.x)))+patchwork::plot_layout(ncol=2,axes = "collect_x")+patchwork::plot_annotation(tag_levels = "A")

```
## Contact distribution

```{r}
contacts %>% glimpse()
contacts = contacts %>% inner_join(popSize) %>% glimpse()

ggplot(contacts, aes(x=time,y=contacts))+
  geom_tile(aes(fill=count/networkSize))+
  #geom_contour(aes(z=count/networkSize),breaks=c(1,3,10,30,100))+
  #scale_fill_viridis_c(lim=c(0,1000),oob=scales::squish)+
  scale_fill_viridis_c(lim=c(0,0.25),oob=scales::squish)+
  facet_wrap(~modelName)


ggplot(
  contacts %>% group_by(policy, contacts, modelName) %>% summarise(density = mean(count)),
  aes(x=contacts,colour=policy,y=density)) + geom_line()+geom_point()+
  .gg_scale_x_log1p()+.gg_scale_y_log1p()+
  facet_wrap(~modelName)

```

First lets extract key dates:

```{r}
# behaviours %>% select(-count, -behaviour) %>%
#   distinct() %>%
#   arrange(time) %>%
#   mutate(change = policy != lag(policy)) %>%
#   filter(change) %>%
#   glimpse()
  
```

```{r}
# ggplot(behaviours,aes(x=time, y=count, fill=as.factor(behaviour),colour=as.factor(behaviour)))+
#   geom_bar(stat="identity")+
#   facet_wrap(~interaction(modelName,modelReplica,experimentName,experimentReplica),scales = "free_y")
```



```{r}
# tmp = linelist %>% group_by(contactCount,modelName,experimentName) %>% count()
# ggplot(tmp,aes(x=contactCount, y=n/sum(n),colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p") + scale_y_continuous(trans="log1p")


tmp = linelist %>% 
  group_by(modelName,experimentName,contactCount) %>% count() %>%
  group_by(modelName,experimentName) %>%
  mutate(y = n/sum(n))

ggplot(tmp,aes(x=contactCount, y=y,colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p") + scale_y_continuous(trans="log1p")

  
# ggplot(tmp,aes(x=time, y=contactCount, fill=n/sum(n),colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p") + scale_y_continuous(trans="log1p")

tmp = linelist %>% 
  group_by(modelName,experimentName,time,contactCount) %>% count() %>%
  group_by(modelName,experimentName,time) %>%
  mutate(dens = n/sum(n))

# ggplot(tmp,aes(x=time, y=contactCount, z=dens, group=interaction(modelName,experimentName) )) + geom_contour(bins = 10) + facet_wrap(~experimentName)
# ggplot(tmp,aes(x=time, y=contactCount, group=interaction(modelName,experimentName) )) + geom_density2d() + facet_wrap(~experimentName)

```


```{r}
ggplot(linelist,aes(x=time,y=normalisedViralLoad,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)
ggplot(linelist %>% group_by(time,experimentName) %>% summarise(contactExposure=mean(contactExposure)),aes(x=time,y=contactExposure,colour = experimentName))+geom_line()

# ggplot(linelist,aes(x=time,y=probabilityInfectiousToday))+geom_point(alpha=0.1)+facet_wrap(~experimentName)
# ggplot(linelist,aes(x=probabilityInfectiousToday,y=normalisedViralLoad))+geom_point(alpha=0.1)

# ggplot(linelist,aes(x=probabilityInfectiousToday,fill=infectious))+geom_density(alpha=0.4)+facet_wrap(~experimentName,scales = "free_y")
# ggplot(linelist,aes(x=probabilityInfectiousToday,fill=symptomatic))+geom_density(alpha=0.4)+facet_wrap(~experimentName,scales = "free_y")



ggplot(linelist %>% filter(contactExposure > 0))+geom_density(aes(x=contactExposure, colour=experimentName))


ggplot(linelist %>% filter(normalisedViralLoad > 0) %>% group_by(personId,experimentName) %>% summarise(normalisedViralLoad = max(normalisedViralLoad)))+geom_density(aes(x=normalisedViralLoad, colour=experimentName))

ggplot(linelist,aes(x=time,fill=as.factor(behaviour),colour=as.factor(behaviour)))+geom_bar()+facet_wrap(~experimentName,scales = "free_y")

linelist %>% group_by(behaviour) %>% count()
```

```{r}
prev_summary = linelist %>% group_by(time,experimentName) %>% summarise(
  meanPresumedLocalPrevalence=mean(presumedLocalPrevalence),
  meanTrueLocalPrevalence = mean(trueLocalPrevalence)
)

ggplot(prev_summary,aes(x=time,colour = experimentName))+
  geom_line(aes(y=meanPresumedLocalPrevalence))+
  geom_line(aes(y=meanTrueLocalPrevalence), linetype="dotted")+
  geom_line(data = summary,aes(x=time,y=prevalence), linetype="dashed")

ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
  geom_line(data = prev_summary,aes(x=time,y=meanPresumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
  geom_line(data = summary,aes(x=time,y=prevalence, colour=experimentName), inherit.aes = FALSE, colour = "red", linetype="dashed")


ggplot(linelist, aes(x=presumedLocalPrevalence, y=trueLocalPrevalence))+geom_point(alpha=0.1,size=0.1)

ggplot(linelist, aes(x=logOddsInfectiousToday, y=trueLocalPrevalence))+geom_point(alpha=0.1,size=0.1)
# ggplot(linelist,aes(x=probabilityInfectiousToday, colour=infectious))+geom_density()
```

```{r}

cutoffs = readr::read_csv("~/tmp/debug.csv")

maxSeverity = linelist %>% group_by(personId,modelName,experimentName) %>% summarise(
  infectious = any(infectious),
  normalisedSeverity = max(normalisedSeverity)
) %>% filter(infectious)

maxSeverity %>% inner_join(cutoffs) %>% group_by(modelName,experimentName) %>% summarise(
  infectionCaseRatio = sum(normalisedSeverity>=severitySymptomsCutoff)/n(),
  infectionHospitalisationRatio = sum(normalisedSeverity>=severityHospitalisationCutoff)/n(),
  infectionFatalityRatio = sum(normalisedSeverity>=severityDeathCutoff)/n()
) %>% mutate(
  caseFatalityRatio = infectionFatalityRatio / infectionCaseRatio,
  caseHospitalisationRatio = infectionHospitalisationRatio / infectionCaseRatio,
)


ggplot(maxSeverity)+geom_density(aes(x=normalisedSeverity, colour=experimentName, group = interaction(modelName,experimentName)))+
  geom_vline(data=cutoffs,aes(colour = experimentName, xintercept=severitySymptomsCutoff))+
  geom_vline(data=cutoffs,aes(colour = experimentName, xintercept=severityHospitalisationCutoff), linetype="dashed")+
  geom_vline(data=cutoffs,aes(colour = experimentName, xintercept=severityDeathCutoff), linetype="dotted")+facet_wrap(~experimentName,ncol=1,scales = "free_y")

```


```{r}

ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line(alpha=0.25)
ggplot(summary,aes(x=time,y=cumulativeInfections, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=symptomaticCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=hospitalisedCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeDeaths, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=infectedCount/10000, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()+ylab("actual prevalence")
ggplot(summary,aes(x=time,y=averageMobility, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=averageCompliance, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=presumedTestPositivePrevalence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testNegativesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate/(testPositivesByResultDate+testNegativesByResultDate), colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=rtEffective, colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()+coord_cartesian(ylim=c(0,5))

ggplot(summary,aes(x=time,fill=as.factor(policy),colour=as.factor(policy),y=1))+geom_bar(stat="identity")+facet_wrap(~interaction(experimentName,experimentReplica))

summary %>% group_by(policy) %>% count()
```



```{r}

# TODO: fix ggoutbreak to handle grouping in ip
ip = ip %>% mutate(boot = as.integer(as.factor(experimentName))) %>% group_by(boot,tau) %>%
  summarise(probability = mean(probability))

summary2 = summary %>% mutate(
    time = ggoutbreak::as.time_period(time, unit="1 day"),
    count = incidence) %>%
    group_by(experimentName,experimentReplica)

estimate = summary2 %>%
  ggoutbreak::poisson_locfit_model() %>%
  ggoutbreak::rt_from_incidence(ip)
  

summary2 %>% ggoutbreak::plot_counts(mapping = aes(colour=experimentName, group=interaction(experimentName,experimentReplica)))
estimate %>% ggoutbreak::plot_growth_rate(mapping = aes(colour=experimentName,group=interaction(experimentName,experimentReplica)))+coord_cartesian(ylim=c(-0.2,0.2))
estimate %>% ggoutbreak::plot_rt(mapping = aes(colour=experimentName,group=interaction(experimentName,experimentReplica))) +
  geom_point(data = summary,aes(x=as.Date(ggoutbreak::as.time_period(time, unit="1 day")),y=rtEffective, colour=experimentName))+
  coord_cartesian(ylim=c(0,4))

```


# Single timeseries analysis (age stratified)

```{r}

# TODO: deal with multiple experiments

library("duckdb")
library("dplyr")
con = dbConnect(duckdb())
DBI::dbExecute(con, sprintf("ATTACH '%s/demog.duckdb' (READ_ONLY)",directory))
DBI::dbExecute(con, sprintf("ATTACH '%s/contacts.duckdb' (READ_ONLY)",directory))
DBI::dbExecute(con, sprintf("ATTACH '%s/linelist.duckdb' (READ_ONLY)",directory))

demog = tbl(con, "demog.demog") %>% glimpse()
contacts = tbl(con, "contacts.contacts") %>% glimpse()
linelist = tbl(con, "linelist.linelist") %>% glimpse()

expected = demog %>% mutate(age = floor(age)) %>% group_by(age) %>%
  summarise(
    count = n()
  ) %>% 
  mutate(
    density = count/sum(count)
  ) %>% glimpse()

n_contacts = contacts %>% ungroup() %>% count() %>% pull(n)

expected2 = expected %>% cross_join(expected, suffix = c("",".contact")) %>%
  mutate(expected = density*density.contact*local(n_contacts)) %>% glimpse()

contact_matrix = contacts %>% 
  select(id,id.contact=contactId) %>% 
  inner_join(demog %>% select(age,id), by="id") %>%
  inner_join(demog %>% select(age.contact = age,id.contact=id), by="id.contact") %>%
  mutate(age = floor(age), age.contact=floor(age.contact)) %>%
  group_by(age,age.contact) %>%
  count()

# contact_matrix %>% glimpse()

plotData = contact_matrix %>% inner_join(expected2 %>% select(age,age.contact,expected), by = join_by(age, age.contact)) %>%
  mutate(contactRR = n/expected)

pContactMatrix = ggplot(plotData, aes(x=age,y=age.contact,fill=contactRR))+geom_tile()+scale_fill_viridis_c(limits=c(0.5, 2), oob=scales::squish, name="RR")+
  xlab("age")+ylab("age")

```



```{r}

inf = linelist %>% filter(incidentInfection) %>% inner_join(demog, by=c("personId"="id")) # %>% glimpse()
hosp = linelist %>% filter(requiringHospitalisation) %>% inner_join(demog, by=c("personId"="id")) # %>% glimpse()
died = linelist %>% filter(time==max(time) && dead) %>% inner_join(demog, by=c("personId"="id")) # %>% glimpse()

pAgeDistribution = ggplot(demog,aes(x=age))+
  geom_density(data = demog, mapping = aes(x=age),colour="black",fill="grey80")+
  geom_line(data = inf, stat="density", mapping = aes(x=age,y=after_stat(density),colour="infected"))+
  geom_line(data = hosp, stat="density", mapping = aes(x=age,y=after_stat(density),colour="hospitalised"))+
  geom_line(data = died, stat="density", mapping = aes(x=age,y=after_stat(density),colour="died"))+
  scale_color_discrete(name=NULL)

pMobilityBaseline = ggplot(demog,aes(x=age,y=mobilityBaseline))+geom_point(alpha=0.1)+
  ylab("mobility")
# transmissibility?

## ggplot(demog,aes(x=locationX,y=locationY))+geom_tile()
```


```{r}



lfData = linelist %>% 
  inner_join(demog, by=c("personId"="id"), suffix=c("",".demog")) %>%
  select(all_of(per_execution), incidentInfection, time,age) %>% 
  glimpse()

model = locfit::locfit(incidentInfection~locfit::lp(time,age), family = "qpoisson", data=lfData)

tmp = tidyr::crossing(age = 0:120, time = 0:100) %>%
  mutate(incid = predict(model,newdata = .))

pRRinfection = ggplot(tmp %>% group_by(time) %>% mutate(RR=incid/mean(incid)), aes(x=time,y=age,fill=RR))+geom_tile()+scale_fill_viridis_c(lim=c(0.8,1.2),option = "magma",oob=scales::squish)

```


```{r}

p2 = pAgeDistribution + pMobilityBaseline + pContactMatrix + pRRinfection +
  patchwork::plot_layout(ncol=2)+patchwork::plot_annotation(tag_levels = "A")

.gg_save_as(p2,filename = "~/tmp/plt2.png",maxWidth = 15,maxHeight = 8)
```



```{r exec=FALSE}
DBI::dbExecute(con, "DETACH contacts")
DBI::dbExecute(con, "DETACH demog")
DBI::dbExecute(con, "DETACH linelist")
```

# Geographical visualisation / animation

```{r}
snap = linelist %>% inner_join(demog, by=join_by(experimentName,modelName,experimentReplica,modelReplica,personId==id))

ggplot(snap,aes(x=locationX,y=locationY))+
  geom_tile(aes(fill=probabilityInfectiousToday))+
  geom_point(data = snap %>% filter(infectious), aes(colour=infectious),size=1)+
  facet_wrap(~experimentName)+
  transition_time(time = time)+
  .gg_hide_legend()+
  ggtitle('{frame}/{nframes}')


t=27
ggplot(snap %>% filter(time==t),aes(x=locationX,y=locationY))+
  geom_tile(aes(fill=probabilityInfectiousToday))+
  facet_wrap(~experimentName)+
  .gg_hide_legend()+
  geom_point(data = snap %>% filter(infectious & time==t), aes(colour=infectious),size=1)

```

# Final size plots

```{r}

final = load_csvs("/home/vp22681/Data/ai4ci/behaviour-comparison/", "final-state")
final = final %>% mutate(behaviour = stringr::str_replace(experimentName,"behaviour:","") %>% factor(levels=c("ignore","symptom-management","reactive-test","smart-agent","smart-agent-lft")))

ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=maximumIncidence))+theme(axis.text.x = element_text(angle=15,hjust=1))+ylab("peak incidence")+xlab(NULL)

p1=ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))+geom_hline(yintercept=128*128,linetype="dashed")+ylab("total infections")+xlab(NULL)
p2=ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=timeToMaximumIncidence))+theme(axis.text.x = element_text(angle=15,hjust=1))+ylab("days to peak")+xlab(NULL)

p3=ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=maximumHospitalBurden))+theme(axis.text.x = element_text(angle=15,hjust=1))+ylab("peak hospital occupancy")+xlab(NULL)+geom_hline(yintercept = UKbedsPer1000*128*128/1000,linetype="dashed")
p4=ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=cumulativeMobilityDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))+ylab("restriction level")+xlab(NULL)

ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=maximumPrevalence))+theme(axis.text.x = element_text(angle=15,hjust=1))+ylab("peak prevalence")+xlab(NULL)


ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=cumulativeAdmissions))+theme(axis.text.x = element_text(angle=15,hjust=1))+ylab("total admissions")+xlab(NULL)
ggplot(final,aes(x=behaviour))+ggdist::geom_swarm(aes(y=cumulativeDeaths))+theme(axis.text.x = element_text(angle=15,hjust=1))+ylab("total deaths")+xlab(NULL)


#ggplot(final %>% filter(cumulativeComplianceDecrease > 0),aes(x=behaviour))+ggdist::geom_swarm(aes(y=cumulativeComplianceDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))

pTmp = p1+p2+p3+p4+patchwork::plot_layout(ncol=2,axes="collect")+patchwork::plot_annotation(tag_levels = "A")
.gg_save_as(pTmp,filename = "~/tmp/plt3.png",maxWidth = 15,maxHeight = 8)

```

