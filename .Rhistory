rate_infection = user(1)
rate_virion_replication = user(2)
rate_neutralization = rate_virion_replication
virions_added = rate_virion_replication * target_infected
virions_neutralized = virions * rate_neutralization * immune_active
virions_infecting = (virions-virions_neutralized) * rate_infection * target_susceptible
# Targets
deriv(target_susceptible) = target_recovered - target_newly_exposed
deriv(target_exposed) = target_newly_exposed - target_exposed_removal - target_start_infected
deriv(target_infected) = target_start_infected - target_infected_removed
rate_target_recovery = user(1/7)
rate_infected_given_exposed = rate_virion_replication
rate_cellular_removal = rate_neutralization
# https://math.stackexchange.com/questions/32800/probability-distribution-of-coverage-of-a-set-after-x-independently-randomly/32816#32816 in the limit where N is large
target_newly_exposed = rate_infection * target_susceptible * (1-exp(-virions_infecting/target_susceptible))
target_recovered = target_removed * rate_target_recovery
p_propensity_chronic = user(0)
target_exposed_removal = target_exposed * (1-p_propensity_chronic) * rate_cellular_removal * immune_active
target_start_infected = (target_exposed-target_exposed_removal) * rate_infected_given_exposed
target_infected_removed = target_infected * rate_cellular_removal * immune_active
# Immunity
rate_priming_given_infected = user(1)
rate_active_given_priming = rate_priming_given_infected
rate_senescence_given_active = user(1/150)
immune_start_priming = immune_dormant * rate_priming_given_infected * (target_exposed+target_infected)
immune_start_active = immune_priming * rate_active_given_priming
deriv(immune_priming) = immune_start_priming - immune_start_active
immune_senescence = immune_active * rate_senescence_given_active
deriv(immune_active) = immune_start_active - immune_senescence
}, skip_cache = TRUE)
y = mod$run(seq(0,10,0.01), c(0.02,1,0,0,0,0))
view(as.data.frame(y))
ode = #odin.dust::odin_dust({
odin::odin({
# Initial state
ratio_immune_target = user(1)
initial(virions) = 0
initial(target_susceptible) = 1
initial(target_exposed) = 0
initial(target_infected) = 0
target_removed = 1 - (target_susceptible + target_exposed + target_infected)
initial(immune_priming) = 0
initial(immune_active) = 0
immune_dormant = ratio_immune_target - immune_priming - immune_active
# Virions
deriv(virions) = virions + virions_added - virions_neutralized - virions_infecting
rate_infection = user(1)
rate_virion_replication = user(2)
rate_neutralization = rate_virion_replication
virions_added = rate_virion_replication * target_infected
virions_neutralized = virions * rate_neutralization * immune_active
virions_infecting = (virions-virions_neutralized) * rate_infection * target_susceptible
# Targets
deriv(target_susceptible) = target_recovered - target_newly_exposed
deriv(target_exposed) = target_newly_exposed - target_exposed_removal - target_start_infected
deriv(target_infected) = target_start_infected - target_infected_removed
rate_target_recovery = user(1/7)
rate_infected_given_exposed = rate_virion_replication
rate_cellular_removal = rate_neutralization
# https://math.stackexchange.com/questions/32800/probability-distribution-of-coverage-of-a-set-after-x-independently-randomly/32816#32816 in the limit where N is large
target_newly_exposed = rate_infection * target_susceptible * (1-exp(-virions_infecting/target_susceptible))
target_recovered = target_removed * rate_target_recovery
p_propensity_chronic = user(0)
target_exposed_removal = target_exposed * (1-p_propensity_chronic) * rate_cellular_removal * immune_active
target_start_infected = (target_exposed -
(target_exposed * (1-p_propensity_chronic) * rate_cellular_removal * immune_active)
) * rate_infected_given_exposed
target_infected_removed = target_infected * rate_cellular_removal * immune_active
# Immunity
rate_priming_given_infected = user(1)
rate_active_given_priming = rate_priming_given_infected
rate_senescence_given_active = user(1/150)
immune_start_priming = immune_dormant * rate_priming_given_infected * (target_exposed+target_infected)
immune_start_active = immune_priming * rate_active_given_priming
deriv(immune_priming) = immune_start_priming - immune_start_active
immune_senescence = immune_active * rate_senescence_given_active
deriv(immune_active) = immune_start_active - immune_senescence
}, skip_cache = TRUE)
y = mod$run(seq(0,10,0.01), c(0.02,1,0,0,0,0))
view(as.data.frame(y))
y = mod$run(seq(0,10,0.01), c(0.02,1,0,0,0,0), maxsteps=50000)
view(as.data.frame(y))
tmp = c(1.970858, 0.604003)
1-exp(-tmp[1]/tmp[2])
tmp = c(1.968742, 0.5996607, 0.001997982, 0.1034668, 0.1473811, 0.3129393)
y = mod$run(seq(0,0.01,0.001), tmp, maxsteps=50000)
view(as.data.frame(y))
y = mod$run(seq(0,0.01,0.0001), tmp, maxsteps=50000)
view(as.data.frame(y))
tmp
tmp[3] * 2 * tmp[6]
ode = #odin.dust::odin_dust({
odin::odin({
# Initial state
ratio_immune_target = user(1)
initial(virions) = 0
initial(target_susceptible) = 1
initial(target_exposed) = 0
initial(target_infected) = 0
target_removed = 1 - (target_susceptible + target_exposed + target_infected)
initial(immune_priming) = 0
initial(immune_active) = 0
immune_dormant = ratio_immune_target - immune_priming - immune_active
# Virions
deriv(virions) = virions + virions_added - virions_neutralized - virions_infecting
rate_infection = user(1)
rate_virion_replication = user(2)
rate_neutralization = rate_virion_replication
virions_added = rate_virion_replication * target_infected
rate_virion_removal = ( rate_neutralization * immune_active +
rate_infection * target_susceptible )
virions_removed = virions * rate_virion_removal
virions_neutralized = virions_removed * (rate_neutralization * immune_active)/rate_virion_removal
virions_infecting = virions_removed * (rate_infection * target_susceptible)/rate_virion_removal
# Targets
deriv(target_susceptible) = target_recovered - target_newly_exposed
deriv(target_exposed) = target_newly_exposed - target_exposed_neut - target_start_infected
deriv(target_infected) = target_start_infected - target_infected_removed
rate_target_recovery = user(1/7)
rate_infected_given_exposed = rate_virion_replication
rate_cellular_removal = rate_neutralization
# https://math.stackexchange.com/questions/32800/probability-distribution-of-coverage-of-a-set-after-x-independently-randomly/32816#32816 in the limit where N is large
target_newly_exposed = rate_infection * target_susceptible * (1-exp(-virions_infecting/target_susceptible))
target_recovered = target_removed * rate_target_recovery
p_propensity_chronic = user(0)
rate_target_exposed_removed = (1-p_propensity_chronic) * rate_cellular_removal * immune_active +
rate_infected_given_exposed
target_exposed_removed = target_exposed * rate_target_exposed_removed
target_exposed_neut = target_exposed_removed * (1-p_propensity_chronic) * rate_cellular_removal * immune_active /   rate_target_exposed_removed
target_start_infected = target_exposed_removed * rate_infected_given_exposed / rate_target_exposed_removed
target_infected_removed = target_infected * rate_cellular_removal * immune_active
# Immunity
rate_priming_given_infected = user(1)
rate_active_given_priming = rate_priming_given_infected
rate_senescence_given_active = user(1/150)
immune_start_priming = immune_dormant * rate_priming_given_infected * (target_exposed+target_infected)
immune_start_active = immune_priming * rate_active_given_priming
deriv(immune_priming) = immune_start_priming - immune_start_active
immune_senescence = immune_active * rate_senescence_given_active
deriv(immune_active) = immune_start_active - immune_senescence
}, skip_cache = TRUE)
run_to_step = function(mod, i, infectFn = \(.x) {if (.x %% 50 == 5) 0.02 else 0}, vaccFn = \(.x) 0) {
infectFn = rlang::as_function(infectFn)
vaccFn = rlang::as_function(vaccFn)
state = mod$run(c(0,1))[1,-1]
timeseries = as.data.frame(t(state)) %>%
mutate(t = 0)
for (j in 1:i) {
state[1] = state[1] + infectFn(j)
state[5] = state[5] + vaccFn(j)
y = mod$run(c(0,1), state, maxsteps = 10000)
new_state = y[2,-1]
state_row = as.data.frame(t(new_state)) %>%
mutate(t = j)
timeseries= bind_rows(timeseries,state_row)
state = new_state
}
return(timeseries)
}
ts = run_to_step(mod,100)
View(ts)
ode = #odin.dust::odin_dust({
odin::odin({
# Initial state
ratio_immune_target = user(1)
initial(virions) = 0
initial(target_susceptible) = 1
initial(target_exposed) = 0
initial(target_infected) = 0
target_removed = 1 - (target_susceptible + target_exposed + target_infected)
initial(immune_priming) = 0
initial(immune_active) = 0
immune_dormant = ratio_immune_target - immune_priming - immune_active
# Virions
deriv(virions) = virions_added - virions_removed
rate_infection = user(1)
rate_virion_replication = user(2)
rate_neutralization = rate_virion_replication
virions_added = rate_virion_replication * target_infected
rate_virion_removal = ( rate_neutralization * immune_active +
rate_infection * target_susceptible )
virions_removed = virions * rate_virion_removal
virions_neutralized = virions_removed * (rate_neutralization * immune_active)/rate_virion_removal
virions_infecting = virions_removed * (rate_infection * target_susceptible)/rate_virion_removal
# Targets
deriv(target_susceptible) = target_recovered - target_newly_exposed
deriv(target_exposed) = target_newly_exposed - target_exposed_removed
deriv(target_infected) = target_start_infected - target_infected_removed
rate_target_recovery = user(1/7)
rate_infected_given_exposed = rate_virion_replication
rate_cellular_removal = rate_neutralization
# https://math.stackexchange.com/questions/32800/probability-distribution-of-coverage-of-a-set-after-x-independently-randomly/32816#32816 in the limit where N is large
target_newly_exposed = rate_infection * target_susceptible * (1-exp(-virions_infecting/target_susceptible))
target_recovered = target_removed * rate_target_recovery
p_propensity_chronic = user(0)
rate_target_exposed_removed = (1-p_propensity_chronic) * rate_cellular_removal * immune_active +
rate_infected_given_exposed
target_exposed_removed = target_exposed * rate_target_exposed_removed
target_exposed_neut = target_exposed_removed * (1-p_propensity_chronic) * rate_cellular_removal * immune_active /  rate_target_exposed_removed
target_start_infected = target_exposed_removed * rate_infected_given_exposed / rate_target_exposed_removed
target_infected_removed = target_infected * rate_cellular_removal * immune_active
# Immunity
rate_priming_given_infected = user(1)
rate_active_given_priming = rate_priming_given_infected
rate_senescence_given_active = user(1/150)
immune_start_priming = immune_dormant * rate_priming_given_infected * (target_exposed+target_infected)
immune_start_active = immune_priming * rate_active_given_priming
deriv(immune_priming) = immune_start_priming - immune_start_active
immune_senescence = immune_active * rate_senescence_given_active
deriv(immune_active) = immune_start_active - immune_senescence
}, skip_cache = TRUE)
y = mod$run(seq(0,10,0.01), c(0.02,1,0,0,0,0), maxsteps=50000)
view(as.data.frame(y))
mod = ode$new()
y = mod$run(seq(0,10,0.01), c(0.02,1,0,0,0,0), maxsteps=50000)
view(as.data.frame(y))
run_to_step = function(mod, i, infectFn = \(.x) {if (.x %% 50 == 5) 0.02 else 0}, vaccFn = \(.x) 0) {
infectFn = rlang::as_function(infectFn)
vaccFn = rlang::as_function(vaccFn)
state = mod$run(c(0,1))[1,-1]
timeseries = as.data.frame(t(state)) %>%
mutate(t = 0)
for (j in 1:i) {
state[1] = state[1] + infectFn(j)
state[5] = state[5] + vaccFn(j)
y = mod$run(c(0,1), state, maxsteps = 10000)
new_state = y[2,-1]
state_row = as.data.frame(t(new_state)) %>%
mutate(t = j)
timeseries= bind_rows(timeseries,state_row)
state = new_state
}
return(timeseries)
}
ts = run_to_step(mod,100)
run_to_step = function(mod, i, infectFn = \(.x) {if (.x %% 50 == 5) 0.02 else 0}, vaccFn = \(.x) 0) {
infectFn = rlang::as_function(infectFn)
vaccFn = rlang::as_function(vaccFn)
state = mod$run(c(0,1))[1,-1]
timeseries = tibble::tibble()
for (j in 1:i) {
state[1] = state[1] + infectFn(j)
state[5] = state[5] + vaccFn(j)
state_row = as.data.frame(t(state)) %>%
mutate(t = j-1)
timeseries= bind_rows(timeseries,state_row)
y = mod$run(c(0,1), state, maxsteps = 10000)
state = y[2,-1]
}
state_row = as.data.frame(t(state)) %>%
mutate(t = j)
timeseries= bind_rows(timeseries,state_row)
return(timeseries)
}
ts = run_to_step(mod,100)
View(ts)
mod$set_user
parsDf = tibble(
rate_virion_replication = seq(1,5,1)
)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
simlist = pars %>% lapply( \(p) {
mod$set_user(user = pars)
return(step(mod,maxtime))
})
parsDf = tibble(
rate_virion_replication = seq(1,5,1)
)
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
simlist = pars %>% lapply( \(p) {
mod$set_user(user = pars)
return(step(mod,maxtime))
})
pars[[1]]
as.vector(pars[[1]])
class(pars[[1]])
class(as.vector(pars[[1]]))
mod$contents()
class(mod$contents())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(step(mod,maxtime))
})
mod
attributes(mod)
mod = ode$new
mod = ode$new()
attributes(mod)
mod
mod$yterms
mod$ynames
p = pars[[1]]
p
maxtime = 200
mod$set_user(user = p)
step(mod,maxtime)
mod = ode$new()
step(mod,maxtime)
run_to_step(mod,maxtime)
mod$set_user(user = p)
run_to_step(mod,maxtime)
sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399,...) {
# pars = parsDf %>% purrr::transpose()
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(run_to_step(mod,maxtime))
})
return(parsDf %>% mutate(sim = simlist) %>% unnest())
}
tmp = sweep(parsDf = tibble(
rate_virion_replication = seq(1,5,1)
))
sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399,...) {
# pars = parsDf %>% purrr::transpose()
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(run_to_step(mod,maxtime))
})
return(parsDf %>% mutate(sim = simlist) %>% unnest(cols = sim))
}
tmp = sweep(parsDf = tibble(
rate_virion_replication = seq(1,5,1)
))
View(tmp)
View(ts)
plot_sweep = function(tmp, facets = ~variable) {
tmp = tmp %>%
filter(variable %in% c("virions","target_susceptible","immune_active")) %>%
group_by(across(-c(value,boot))) %>%
summarise(value = mean(value))
list(
ggplot(tmp,aes(x=step-10,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
guides(colour=guide_legend(position="bottom"))+
facet_wrap(facets,scales = "free_y"),
ggplot(tmp,aes(x=step-10,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
facet_wrap(facets,scales = "free_y")+
guides(colour=guide_legend(position="bottom"))+
coord_cartesian(xlim=c(0,50))
)
}
mod = ode$new()
# ts = run_to_step(mod,100)
sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399,...) {
# pars = parsDf %>% purrr::transpose()
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(run_to_step(mod,maxtime))
})
return(
parsDf %>% mutate(sim = simlist) %>%
mutate(sim = purrr::map(sim, \x %>% pivot_longer(-t, values_to = "value", names_to = "variable") ) %>%
mod = ode$new()
# ts = run_to_step(mod,100)
sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399,...) {
# pars = parsDf %>% purrr::transpose()
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(run_to_step(mod,maxtime))
})
return(
parsDf %>% mutate(sim = simlist) %>%
mutate(
sim = purrr::map(sim, \x %>% pivot_longer(-t, values_to = "value", names_to = "variable") )
mod = ode$new()
# ts = run_to_step(mod,100)
sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399,...) {
# pars = parsDf %>% purrr::transpose()
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(run_to_step(mod,maxtime))
})
return(
parsDf %>% mutate(sim = simlist) %>%
mutate(
sim = purrr::map(
sim, \(x) pivot_longer(x, -t, values_to = "value", names_to = "variable")
)) %>%
unnest(cols = sim) %>%
rename(step=t,boot=set)
)
}
tmp = sweep(parsDf = tibble(
rate_virion_replication = seq(1,5,1)
))
tmp %>% plot_sweep()
mod = ode$new()
# ts = run_to_step(mod,100)
sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399,...) {
# pars = parsDf %>% purrr::transpose()
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(run_to_step(mod,maxtime))
})
return(
parsDf %>% mutate(sim = simlist, boot=0) %>%
mutate(
sim = purrr::map(
sim, \(x) pivot_longer(x, -t, values_to = "value", names_to = "variable")
)
) %>%
unnest(cols = sim) %>%
rename(step=t)
)
}
tmp = sweep(parsDf = tibble(
rate_virion_replication = seq(1,5,1)
))
tmp %>% plot_sweep()
plot_sweep = function(tmp, facets = ~variable) {
tmp = tmp %>%
filter(variable %in% c("virions","target_susceptible","immune_active")) %>%
group_by(across(-c(value,boot))) %>%
summarise(value = mean(value))
list(
ggplot(tmp,aes(x=step-5,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
guides(colour=guide_legend(position="bottom"))+
facet_wrap(facets,scales = "free_y"),
ggplot(tmp,aes(x=step-5,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
facet_wrap(facets,scales = "free_y")+
guides(colour=guide_legend(position="bottom"))+
coord_cartesian(xlim=c(NA,50))
)
}
tmp %>% plot_sweep()
# ts = run_to_step(mod,100)
sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399, mod = ode$new(), ...) {
# pars = parsDf %>% purrr::transpose()
pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
simlist = pars %>% lapply( \(p) {
mod$set_user(user = p)
return(run_to_step(mod,maxtime,...))
})
return(
parsDf %>% mutate(sim = simlist, boot=0) %>%
mutate(
sim = purrr::map(
sim, \(x) pivot_longer(x, -t, values_to = "value", names_to = "variable")
)
) %>%
unnest(cols = sim) %>%
rename(step=t)
)
}
plot_sweep = function(tmp, facets = ~variable) {
tmp = tmp %>%
filter(variable %in% c("virions","target_susceptible","immune_active")) %>%
group_by(across(-c(value,boot))) %>%
summarise(value = mean(value))
list(
ggplot(tmp,aes(x=step-5,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
guides(colour=guide_legend(position="bottom"))+
facet_wrap(facets,scales = "free_y"),
ggplot(tmp,aes(x=step-5,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
facet_wrap(facets,scales = "free_y")+
guides(colour=guide_legend(position="bottom"))+
coord_cartesian(xlim=c(NA,50))
)
}
tmp = sweep(parsDf = tibble(
rate_virion_replication = seq(1,5,1)
))
tmp %>% plot_sweep()
tmp = sweep(parsDf = tibble(
ratio_immune_target = c(0.25,0.5,1,2,4), # << HOST FACTOR, duration and severity of disease, immune activity & peak of virions, can lead to chrnoic carrier state
p_propensity_chronic = 0, #c(0,0.25, 0.5,0.75,1), # << HOST PROB CHRONIC
rate_priming_given_infected = 1, #seq(0.7,1.3,0.1), # c(0.25,0.5,1,2,4,8), # severity roughly negatively linear with this. << HOST FACTOR, durantion, severity, and peak of virus, immunity fixed and no chrnoic disease effect
rate_senescence_given_active = 1/150, #1/800,
rate_target_recovery = 1/7, #1/c(1,3,7,15,30), # << HOST FACTOR, duration and severity of disease, no efffect on peak viral load ? useful for asymptomatics
))
tmp %>% plot_sweep(~variable)
tmp = sweep(parsDf = tibble(
# shortens GT? worsens severity
rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
# shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
rate_infection = c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
))
tmp %>% plot_sweep(~variable)
tmp2 = sweep(parsDf = tibble(
# shortens GT? worsens severity
rate_virion_replication = c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
# shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
rate_infection = 1# c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
))
tmp2 %>% plot_sweep(~variable)
tmp = sweep(parsDf = tibble(
# shortens GT? worsens severity
rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
# shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
rate_infection = c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
))
tmp %>% plot_sweep(~variable)
pkgtools::fix_unqualified_fns()
