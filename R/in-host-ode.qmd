---
title: "In host viral load model"
author: "Rob Challen"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
here::i_am("in-host-ode.qmd")
library(tidyverse)

# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))

```

# Model desiderata

* Sensible viral peak in naive host that can be translated into a viral load PCR
measurement, with fairly predictable peak of virus, so we can determine a test
signal / noise parameter for sensitivity and specificity, and make the PCR
translation sensible.
* Viral peak related to infectiousness, and producing a typical latent period / 
infectious period / delay distribution for secondary infections.
* Tunable peak viral load and viral shedding duration.
* Some measure of severity that allows us to express risk of illness (e.g. symptoms,
hospitalisation, death) in terms of modelled quantities.
* Tunable host response to infection leading to different severity for given
viral challenge
* Ability to vaccinate individuals leading to less severe or lower viral peaks.
* Waning of immunity. Tunable.
* Secondary milder disease course, on second viral challenge.
* Complete elimination of infection possible (or stable very low level of virus).
* Chronic infection state possible.


```{r}
rendered = dtrackr::save_dot("
digraph { 
  subgraph cluster_virions {
    label = 'virions';
    V;
    VR [shape = point, width = 0];
    VR2 [shape = point, width = 0];
  }
  subgraph cluster_targets {
    label = 'target cells (T)';
    S;
    SE [shape = point, width = 0];
    E;
    ER [shape = point, width = 0];
    I;
    IR [shape = point, width = 0];
    R;
  }
  subgraph cluster_immunity {
    label = 'immunity (J)';
    D;
    DP [shape = point, width = 0];
    P;
    A;
  }
  S -> SE [ arrowhead = none ];
  SE -> E;
  E -> I;
  I -> IR [ arrowhead = none ];
  IR -> R;
  E -> ER [ arrowhead = none ];
  ER -> R;
  R -> S;
  D -> DP [ arrowhead = none ];
  DP -> P;
  P -> A;
  A -> D;
  I -> DP [ arrowhead = empty, style = 'dashed', constraint=false]; 
  V -> SE [ arrowhead = none]; 
  I -> V;
  V -> VR [ arrowhead = none ];
  VR -> VR2  [ arrowhead = odot ];
  A -> ER [ arrowhead = empty, style = 'dotted', constraint=false]; 
  A -> IR [ arrowhead = empty, style = 'dotted', constraint=false]; 
  A -> VR [ arrowhead = empty, style = 'dotted', constraint=false]; 
}
",tempfile())
knitr::include_graphics(rendered$paths$png)
```

# Compartments

$V$ is count of virions.

$T$ is total target cells, $S$, susceptible targets, $E$
is "exposed" targets (infected but not yet producing virus), $I$ is infected (
and producing virus), $R$, "removed" are target cells inactivated by immunity.


$J$ is the total number of immune cells, of which $D$ are dormant, $P$ are priming, and 
$A$ are active. 

$\alpha$ is the fraction of immune to target cells. This affects how effective the
immune system is at clearing the virus.


$$
\begin{align}
V \\
1 &= S + E + I + R\\
\alpha &= D + P + A\\
\end{align}
$$

## Virions

$X_t$ is the time varying external viral exposure. $\beta_{neut}$ is a rate at
which virions are neutralised by the immune system, after which they are removed
from the system. $\beta_{inf}$ is a rate at which virions infect susceptible
target cells. $\beta_{rep}$ is a rate at which infected target cell replicate
virus.

A continuous deterministic model might be:

$$
\begin{align}

V_{add} &= \beta_{rep} \times I \\
\beta_{remov} &= \beta_{neut} \times A + \beta_{inf} \times S \\ 
V_{remov} &= \beta_{remov} \times V \\
V_{neut} &= \frac{\beta_{neut} \times A}{\beta_{remov}} \times V_{remov} \\
V_{inf} &= \frac{\beta_{inf} \times S}{\beta_{remov}} \times V_{remov}\\

\frac{dV}{dt} &= X_t - V_{remov} + V_{add}\\

\end{align}
$$

## Targets

The interaction between virions and susceptible target cells has to take into 
account the possibility of multiple virions infecting the same cell.

This is different in the stochastic versus the continuous case, as in the former
we can use the absolute counts to get a precise value for the probability of
virions interacting with multiple. 

$\beta_{recov}$ is a recovery rate of target cells, $\beta_{EI}$ is the rate 
"exposed" targets convert to "infected" cells which produce new virions. 
$\gamma$ is a relative probability of discovery of exposed cells compared to 
infected.

TODO: think about moving innoculation to S->E transition rather than adding to 
viral component. Would need to scale innoculation by the immune activity, 
before the $\beta_{infcell}$ to get similar mucosal immune effect.

$$
\begin{align}
\beta_{infcell} &= \beta_{inf} \times \bigg(1-e^{-\frac{V_{inf}}{S}}\bigg) \\
S_E &= \beta_{infcell} \times S \\
\beta_{E-} &= \gamma\beta_{neut} \times A + \beta_{EI} \\
E_{-} &= \beta_{E-} \times E \\
E_R &= \frac{\gamma\beta_{neut} \times A}{\beta_{E-}} \times E_{-} \\
E_I &= \frac{\beta_{EI}}{\beta_{E-}} \times E_{-} \\
I_R &= \beta_{neut} \times A \times I \\
\frac{dS}{dt} &= \beta_{recov} R - S_E \\
\frac{dE}{dt} &= S_E - E_{-} \\
\frac{dI}{dt} &= E_I - I_R\\
\frac{dR}{dt} &= E_R + I_R - \beta_{recov} R\\ 
\end{align}
$$

## Immunity

$V_t$ is a time varying vaccination dose. $\beta_{induce}$ is the rate at which
exposed and infected targets. $\beta_{PA}$ is the rate at which primed immune 
cells transition to active. $\beta_{waning}$ is the rate at which active immune
cells become dormant.

The SEIRS target cell model, with phases susceptible, exposed, 
producing infective virus, regenerating is coupled to a SEIS-like model for immunity where 
the phases as dormant, priming, active, dormant.


$$
\begin{align}
D_P &= \beta_{induce} \times \alpha(E+I) \times D \\
\frac{dD}{dt} &= \beta_{waning} A - D_P \\
\frac{dP}{dt} &= D_P - \beta_{PA} P \\
\frac{dA}{dt} &= \beta_{PA} P - \beta_{waning} A\\
\end{align}
$$


#  model implementation

```{r}

ode = #odin.dust::odin_dust({
  odin::odin({
  
  # Initial state
  
  ratio_immune_target = user(1)
  
  initial(virions) = 0
  
  initial(target_susceptible) = 1
  initial(target_exposed) = 0
  initial(target_infected) = 0
  
  target_removed = 1 - (target_susceptible + target_exposed + target_infected)
  
  initial(immune_priming) = 0
  initial(immune_active) = 0
  immune_dormant = ratio_immune_target - immune_priming - immune_active
  
  # Virions
  
  deriv(virions) = virions_added - virions_removed
  
  rate_infection = user(1)
  rate_virion_replication = user(2)
  rate_neutralization = rate_virion_replication
  
  virions_added = rate_virion_replication * target_infected
  
  rate_virion_removal = ( rate_neutralization * immune_active +
      rate_infection * target_susceptible )
  
  virions_removed = virions * rate_virion_removal
  virions_neutralized = virions_removed * (rate_neutralization * immune_active)/rate_virion_removal
  virions_infecting = virions_removed * (rate_infection * target_susceptible)/rate_virion_removal
  
  
  
  # Targets
  
  deriv(target_susceptible) = target_recovered - target_newly_exposed
  deriv(target_exposed) = target_newly_exposed - target_exposed_removed
  deriv(target_infected) = target_start_infected - target_infected_removed
  
  rate_target_recovery = user(1/7)
  rate_infected_given_exposed = rate_virion_replication
  rate_cellular_removal = rate_neutralization
  
  
  # https://math.stackexchange.com/questions/32800/probability-distribution-of-coverage-of-a-set-after-x-independently-randomly/32816#32816 in the limit where N is large
  target_newly_exposed = rate_infection * target_susceptible * (1-exp(-virions_infecting/target_susceptible))

  target_recovered = target_removed * rate_target_recovery
  
  p_propensity_chronic = user(0)
  
  rate_target_exposed_removed = (1-p_propensity_chronic) * rate_cellular_removal * immune_active +
    rate_infected_given_exposed
  target_exposed_removed = target_exposed * rate_target_exposed_removed
  
  target_exposed_neut = target_exposed_removed * (1-p_propensity_chronic) * rate_cellular_removal * immune_active /  rate_target_exposed_removed
  target_start_infected = target_exposed_removed * rate_infected_given_exposed / rate_target_exposed_removed
  
  target_infected_removed = target_infected * rate_cellular_removal * immune_active
  
  
  # Immunity
  
  
  
  rate_priming_given_infected = user(1)
  rate_active_given_priming = rate_priming_given_infected
  rate_senescence_given_active = user(1/150)
  
  
  immune_start_priming = immune_dormant * rate_priming_given_infected * (target_exposed+target_infected)
  
  immune_start_active = immune_priming * rate_active_given_priming

  deriv(immune_priming) = immune_start_priming - immune_start_active
      
  immune_senescence = immune_active * rate_senescence_given_active
    
  deriv(immune_active) = immune_start_active - immune_senescence
  
  
  
}, skip_cache = TRUE)
```



```{r}
run_to_step = function(mod, i, infectFn = \(.x) {if (.x %% 50 == 5) 0.02 else 0}, vaccFn = \(.x) 0) {
  
  infectFn = rlang::as_function(infectFn)
  vaccFn = rlang::as_function(vaccFn)
  
  state = mod$run(c(0,1))[1,-1]
  
  timeseries = tibble::tibble()
  
  for (j in 1:i) {
    state[1] = state[1] + infectFn(j)
    state[5] = state[5] + vaccFn(j)
    state_row = as.data.frame(t(state)) %>%
      mutate(t = j-1)
    timeseries= bind_rows(timeseries,state_row)
    
    y = mod$run(c(0,1), state, maxsteps = 10000)
    state = y[2,-1]
    
  }
  
  state_row = as.data.frame(t(state)) %>%
      mutate(t = j)
  timeseries= bind_rows(timeseries,state_row)
  
  return(timeseries)
  
}
```

```{r}

# ts = run_to_step(mod,100)

sweep = function(parsDf = tibble::tibble(boot=1), maxtime = 399, mod = ode$new(), ...) {
  
  # pars = parsDf %>% purrr::transpose()
  pars = parsDf %>% as.list() %>% purrr::list_transpose(simplify = FALSE)
  if (!"set" %in% colnames(parsDf)) parsDf = parsDf %>% mutate(set = row_number())
  simlist = pars %>% lapply( \(p) {
    mod$set_user(user = p)
    return(run_to_step(mod,maxtime,...))
  })
  
  return(
    parsDf %>% mutate(sim = simlist, boot=0) %>% 
      mutate(
        sim = purrr::map(
          sim, \(x) pivot_longer(x, -t, values_to = "value", names_to = "variable")
        )
      ) %>%
      unnest(cols = sim) %>% 
      rename(step=t)
      
  )
}

plot_sweep = function(tmp, facets = ~variable) {
  
  tmp = tmp %>% 
    filter(variable %in% c("virions","target_susceptible","immune_active")) %>%
    group_by(across(-c(value,boot))) %>%
    summarise(value = mean(value))
  
  list(
  ggplot(tmp,aes(x=step-5,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
    geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
    guides(colour=guide_legend(position="bottom"))+
    facet_wrap(facets,scales = "free_y"),
  ggplot(tmp,aes(x=step-5,y=value,colour = as.factor(set),group=interaction(as.factor(set))))+
    geom_line()+guides(colour = guide_legend(override.aes = list(alpha=1)))+
    facet_wrap(facets,scales = "free_y")+
    guides(colour=guide_legend(position="bottom"))+
    coord_cartesian(xlim=c(NA,50))
  )
} 



```



```{r}

tmp = sweep(parsDf = tibble(
  rate_virion_replication = seq(1,5,1)
))

tmp %>% plot_sweep()

```

## Host factors

```{r}

tmp = sweep(parsDf = tibble(
  
  ratio_immune_target = c(0.25,0.5,1,2,4), # << HOST FACTOR, duration and severity of disease, immune activity & peak of virions, can lead to chronic carrier state
  
  p_propensity_chronic = 0, #c(0,0.25, 0.5,0.75,1), # << HOST PROB CHRONIC
  
  rate_priming_given_infected = 1, #seq(0.7,1.3,0.1), # c(0.25,0.5,1,2,4,8), # severity roughly negatively linear with this. << HOST FACTOR, duration, severity, and peak of virus, immunity fixed and no chrnoic disease effect
  
  rate_senescence_given_active = 1/150, #1/800,
  rate_target_recovery = 1/7, #1/c(1,3,7,15,30), # << HOST FACTOR, duration and severity of disease, no effect on peak viral load ? useful for asymptomatics
))

tmp %>% plot_sweep(~variable)



```


## Viral factors

rate of virion replication defines how many viral copies are produced per 
infected cells and also how quickly exposed cells transition to infected.
It is a measure of how effiencetly the virus replicates once in the cell

```{r}

tmp = sweep(parsDf = tibble(
  
  # shortens GT? worsens severity
  rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  
))

tmp %>% plot_sweep(~variable)
```


```{r}
tmp2 = sweep(parsDf = tibble(
  
  # shortens GT? worsens severity
  rate_virion_replication = c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = 4/rate_virion_replication, #rev(c(0.25,0.5,1,2,4,8)) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  
))

tmp2 %>% plot_sweep(~variable)

```

The rate of infection defines how quickly virions enter cells. Things like 
spike protein mutations are likely to change this and this is the physiological 
candidate for a more infectious variant (although reduced efficiency of clearance could 
also a factor here).

```{r}
tmp = sweep(parsDf = tibble(
  
  # shortens GT? worsens severity
  rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  
))

tmp %>% plot_sweep(~variable)
```

## Peaks and phases

```{r}

tmp2 = sweep(parsDf = tibble(
  
  ratio_immune_target = 1, #c(0.25,0.5,1,2,4), # << HOST FACTOR, duration and severity of disease, immune activity & peak of virions, can lead to chrnoic carrier state
  
  # shortens GT? worsens severity
  rate_virion_replication = 4, #c(1,2,4,8,16,32), #1, #c(1.5,2,2.5), #c(0.5,1,2,4), # c(0.5,1,2,4,8), << VIRAL FACTOR
  # shorten GT worsen severity ?higher values lead to chronic disease, if exposed are not cleared as more cellular reservoir?
  rate_infection = 1, #c(0.25,0.5,1,2,4,8) #1 #rate_virion_replication, #1, #c(0.8, 0.9, 1, 1.1, 1.2, 2), #c(3,2,1,0.5) # 1/rate_virion_replication * 2, #c(0.25,0.5,1,2,4,8), # * seq(1,2,0.1),
  rate_infected_given_exposed = 1, #rate_virion_replication, #rate_infection,
  
  rate_neutralization = rate_virion_replication * 1, #c(0.25,0.5,1,2,4),
  rate_cellular_removal = rate_neutralization, # * c(0.25,0.5,1,2,4),
  p_propensity_chronic = 0, #c(0,0.25, 0.5,0.75,1), # << HOST PROB CHRONIC
  
  rate_priming_given_infected = rnorm(50,1,0.1), # c(0.25,0.5,1,2,4,8), # severity roughly negatively linear with this. << HOST FACTOR, durantion, severity, and peak of virus, immunity fixed and no chrnoic disease effect
  rate_active_given_priming = rate_priming_given_infected, #* c(1,2,4,8), #c(0.5,1,2,4,8),
  
  rate_senescence_given_active = 1/150, #1/800,
  rate_target_recovery = 1/7, #1/c(1,3,7,15,30), # << HOST FACTOR, duration and severity of disease, no efffect on peak viral load ? useful for asymptomatics
))

# tmp2 %>% glimpse()

tmp3 = tmp2 %>% 
  filter(variable %in% c("virions","target_susceptible","immune_active")) %>%
  mutate(phase = (step %/% 100)+1) %>%
  group_by(across(-c(step,value,boot))) %>%
  summarise(
    peak = max(value),
    minima = min(value)
  ) %>%
  glimpse()

ggplot(tmp3 %>% filter(variable == "virions", phase == 1))+
  geom_density(aes(x=peak, colour=as.factor(phase)))+
  facet_wrap(~variable,scales="free")
  

lm(peak ~ rate_priming_given_infected, tmp3 %>% filter(variable == "virions", phase == 1))
lm(peak ~ rate_priming_given_infected, tmp3 %>% filter(variable == "virions", phase == 4))

# ggplot(tmp3)+
#   geom_density(aes(x=as.factor(set), ymin=minima,ymax=peak))+
#   geom_errorbar(aes(x=as.factor(set), ymin=minima,ymax=peak))+
#   facet_wrap(~variable,scales="free_x")

```


## Invasion and infection

Infection of the organism can be thought of as the conditions underwhich 
replication in host is established. This is analagous to R0 in a SEIR model.
At the disease free equilibrium point we consider the next generation matrices
of the infected classes E and I.

$$
\begin{align}
\beta_{infcell} &= \beta_{inf} \times \bigg(1-e^{-\frac{V_{inf}}{S}}\bigg) \\
S_E &= \beta_{infcell} \times S \\
\beta_{E-} &= \gamma\beta_{neut} \times A + \beta_{EI} \\
E_{-} &= \beta_{E-} \times E \\
E_R &= \frac{\gamma\beta_{neut} \times A}{\beta_{E-}} \times E_{-} \\
E_I &= \frac{\beta_{EI}}{\beta_{E-}} \times E_{-} \\
I_R &= \beta_{neut} \times A \times I \\
\frac{dS}{dt} &= \beta_{recov} R - S_E \\
\frac{dE}{dt} &= S_E - E_{-} \\
\frac{dI}{dt} &= E_I - I_R\\
\frac{dR}{dt} &= E_R + I_R - \beta_{recov} R\\ 
\end{align}
$$

linearize at disease free equilibrium, and assume known value for A

S = 1, E=I=R=0;


$$
\begin{align}
\dot{E} &= \beta_{infcell}I - (\gamma\beta_{neut} \times A + \beta_{EI}) \times E\\
\dot{I} &= \beta_{EI} \times E - \beta_{neut} \times A \times I \\
\end{align}
$$

$$
\begin{align}
F &= \begin{bmatrix}
0 & \beta_{infcell}S_0\\
0 & 0
\end{bmatrix} \\
V &= \begin{bmatrix}
- (\gamma\beta_{neut} \times A + \beta_{EI}) & 0 \\
\beta_{EI} & - \beta_{neut} \times A
\end{bmatrix} \\
\end{align}
$$

$$
\begin{align}
R_0 &= \frac{\beta_{EI}S_0\beta_{infcell}}{(\gamma\beta_{neut} \times A + \beta_{EI})(\beta_{neut} \times A)} \\
R_0 &= \frac{\beta_{EI}S_0\beta_{inf} \times \bigg(1-e^{-\frac{V_{inf}}{S_0}}\bigg)}{(\gamma\beta_{neut} \times A + \beta_{EI})(\beta_{neut} \times A)} \\
\end{align}
$$

```{r}
mod = ode$new()
tmp = mod$run(c(0,1))
conditions = tmp[2,-1]

R0 = function(conditions, params = mod$contents()) {
  tmp = c(conditions,params)
  with(tmp, {
    (rate_infected_given_exposed * target_susceptible * rate_infection * (1-exp(-virions/target_susceptible))) / 
      (((1-p_propensity_chronic) * rate_neutralization * immune_active + rate_infected_given_exposed) * (rate_neutralization * immune_active))
  })
}



conditions[["immune_active"]] = 0.7
conditions[["virions"]] = 0.01
R0(conditions)

y = mod$run(seq(0,100,0.1), y= conditions)

plot(y)


```