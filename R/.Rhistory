ggplot(summary,aes(x=time,y=averageCompliance, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=presumedTestPositivePrevalence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositives, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
geom_line(data = prev_summary,aes(x=time,y=presumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
geom_line(data = summary,aes(x=time,y=infectedCount/10000, colour=experimentName), inherit.aes = FALSE)
ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
geom_line(data = prev_summary,aes(x=time,y=meanPresumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
geom_line(data = summary,aes(x=time,y=infectedCount/10000, colour=experimentName), inherit.aes = FALSE, colour = "red", linetype="dashed")
ggplot(prev_summary,aes(x=time,colour = experimentName))+
geom_line(aes(y=meanPresumedLocalPrevalence))+
geom_line(aes(y=meanTrueLocalPrevalence), linetype="dotted")+
geom_line(data = summary,aes(x=time,y=infectedCount/10000), linetype="dashed")
logit(0.001)
logit(0.005)
logit(0.002)
logit(0.2)
logit(0.125)
logit(0.2)-logit(0.125)
expit(logit(0.001)+logit(0.2)-logit(0.125))
linelist = readr::read_csv("~/tmp/linelist.csv")
summary = readr::read_csv("~/tmp/summary.csv")
prev_summary = linelist %>% group_by(time,experimentName) %>% summarise(
meanPresumedLocalPrevalence=mean(presumedLocalPrevalence),
meanTrueLocalPrevalence = mean(trueLocalPrevalence)
)
ggplot(prev_summary,aes(x=time,colour = experimentName))+
geom_line(aes(y=meanPresumedLocalPrevalence))+
geom_line(aes(y=meanTrueLocalPrevalence), linetype="dotted")+
geom_line(data = summary,aes(x=time,y=infectedCount/10000), linetype="dashed")
ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
geom_line(data = prev_summary,aes(x=time,y=meanPresumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
geom_line(data = summary,aes(x=time,y=infectedCount/10000, colour=experimentName), inherit.aes = FALSE, colour = "red", linetype="dashed")
# ggplot(linelist,aes(x=probabilityInfectiousToday, colour=infectious))+geom_density()
ggplot(prev_summary,aes(x=time,colour = experimentName))+
geom_line(aes(y=meanPresumedLocalPrevalence))+
geom_line(aes(y=meanTrueLocalPrevalence), linetype="dotted")+
geom_line(data = summary,aes(x=time,y=prevalence), linetype="dashed")
linelist = readr::read_csv("~/tmp/linelist.csv")
summary = readr::read_csv("~/tmp/summary.csv")
prev_summary = linelist %>% group_by(time,experimentName) %>% summarise(
meanPresumedLocalPrevalence=mean(presumedLocalPrevalence),
meanTrueLocalPrevalence = mean(trueLocalPrevalence)
)
ggplot(prev_summary,aes(x=time,colour = experimentName))+
geom_line(aes(y=meanPresumedLocalPrevalence))+
geom_line(aes(y=meanTrueLocalPrevalence), linetype="dotted")+
geom_line(data = summary,aes(x=time,y=prevalence), linetype="dashed")
ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
geom_line(data = prev_summary,aes(x=time,y=meanPresumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
geom_line(data = summary,aes(x=time,y=infectedCount/10000, colour=experimentName), inherit.aes = FALSE, colour = "red", linetype="dashed")
# ggplot(linelist,aes(x=probabilityInfectiousToday, colour=infectious))+geom_density()
logit(0.0025)
linelist = readr::read_csv("~/tmp/linelist.csv")
summary = readr::read_csv("~/tmp/summary.csv")
prev_summary = linelist %>% group_by(time,experimentName) %>% summarise(
meanPresumedLocalPrevalence=mean(presumedLocalPrevalence),
meanTrueLocalPrevalence = mean(trueLocalPrevalence)
)
ggplot(prev_summary,aes(x=time,colour = experimentName))+
geom_line(aes(y=meanPresumedLocalPrevalence))+
geom_line(aes(y=meanTrueLocalPrevalence), linetype="dotted")+
geom_line(data = summary,aes(x=time,y=prevalence), linetype="dashed")
ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
geom_line(data = prev_summary,aes(x=time,y=meanPresumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
geom_line(data = summary,aes(x=time,y=infectedCount/10000, colour=experimentName), inherit.aes = FALSE, colour = "red", linetype="dashed")
ggplot(linelist,aes(x=time,y=presumedLocalPrevalence,group=personId))+geom_line(alpha=0.01)+facet_wrap(~experimentName)+
geom_line(data = prev_summary,aes(x=time,y=meanPresumedLocalPrevalence,colour = experimentName), inherit.aes = FALSE, colour="red")+
geom_line(data = summary,aes(x=time,y=prevalence, colour=experimentName), inherit.aes = FALSE, colour = "red", linetype="dashed")
snap = linelist %>% inner_join(demog, by=join_by(experimentName,modelName,experimentReplica,modelReplica,personId==id))
demog = readr::read_csv("~/tmp/demog.csv")
snap = linelist %>% inner_join(demog, by=join_by(experimentName,modelName,experimentReplica,modelReplica,personId==id))
ggplot(snap,aes(x=hilbertX,y=hilbertY))+
geom_tile(aes(fill=probabilityInfectiousToday))+
geom_point(data = snap %>% filter(infectious), aes(colour=infectious),size=0.5)+
transition_time(time = time)+
ggtitle('{frame}/{nframes}')
ggplot(snap %>% filter(time==35),aes(x=hilbertX,y=hilbertY))+
geom_tile(aes(fill=probabilityInfectiousToday))+
geom_point(data = snap %>% filter(infectious), aes(colour=infectious),size=0.5)
ggplot(snap %>% filter(time==35),aes(x=hilbertX,y=hilbertY))+
geom_tile(aes(fill=probabilityInfectiousToday))+
geom_point(data = snap %>% filter(infectious & time==35), aes(colour=infectious),size=0.5)
t=55
ggplot(snap %>% filter(time==t),aes(x=hilbertX,y=hilbertY))+
geom_tile(aes(fill=probabilityInfectiousToday))+
geom_point(data = snap %>% filter(infectious & time==t), aes(colour=infectious),size=0.5)
ggplot(linelist, aes(x=presumedLocalPrevalence, y=trueLocalPrevalence))+geom_point(alpha=0.1,size=0.1)
linelist = readr::read_csv("~/tmp/linelist.csv")
summary = readr::read_csv("~/tmp/summary.csv")
demog = readr::read_csv("~/tmp/demog.csv")
ggplot(linelist, aes(x=logOddsInfectiousToday, y=trueLocalPrevalence))+geom_point(alpha=0.1,size=0.1)
ggplot(linelist, aes(x=presumedLocalPrevalence, y=trueLocalPrevalence))+geom_point(alpha=0.1,size=0.1)
knitr::opts_chunk$set(echo = TRUE)
here::i_am("abm-output.qmd")
library(tidyverse)
library(gganimate)
# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))
linelist = readr::read_csv("~/tmp/linelist.csv")
summary = readr::read_csv("~/tmp/summary.csv")
demog = readr::read_csv("~/tmp/demog.csv")
tmp = linelist %>% group_by(contactCount,modelName,experimentName) %>% count()
ggplot(tmp,aes(x=contactCount, y=n/sum(n),colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p")
ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeInfections, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=symptomaticCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=hospitalisedCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeDeaths, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=infectedCount/10000, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()+ylab("actual prevalence")
ggplot(summary,aes(x=time,y=averageMobility, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=averageCompliance, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=presumedTestPositivePrevalence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositives, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testNegativesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate/(testPositivesByResultDate+testNegativesByResultDate), colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=rtEffective, colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()+coord_cartesian(ylim=c(0,5))
t=55
ggplot(snap %>% filter(time==t),aes(x=hilbertX,y=hilbertY))+
geom_tile(aes(fill=probabilityInfectiousToday))+
facet_wrap(~experimentName)+
geom_point(data = snap %>% filter(infectious & time==t), aes(colour=infectious),size=0.5)
snap = linelist %>% inner_join(demog, by=join_by(experimentName,modelName,experimentReplica,modelReplica,personId==id))
t=55
ggplot(snap %>% filter(time==t),aes(x=hilbertX,y=hilbertY))+
geom_tile(aes(fill=probabilityInfectiousToday))+
facet_wrap(~experimentName)+
geom_point(data = snap %>% filter(infectious & time==t), aes(colour=infectious),size=0.5)
t=100
ggplot(snap %>% filter(time==t),aes(x=hilbertX,y=hilbertY))+
geom_tile(aes(fill=probabilityInfectiousToday))+
facet_wrap(~experimentName)+
geom_point(data = snap %>% filter(infectious & time==t), aes(colour=infectious),size=0.5)
knitr::opts_chunk$set(echo = TRUE)
here::i_am("abm-output.qmd")
library(tidyverse)
library(gganimate)
# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))
final_state = readr::read_csv("~/tmp/test1/final-state.csv")
ggplot(final_state,aes(x=experimentName))+geom_violin(aes(y=cumulativeInfections))
final_state = readr::read_csv("~/tmp/test1/final-state.csv")
ggplot(final_state,aes(x=experimentName))+geom_violin(aes(y=cumulativeDeaths))
ggplot(final_state,aes(x=experimentName))+geom_point(aes(y=cumulativeDeaths),position = "jitterdodge")
ggplot(final_state,aes(x=experimentName))+geom_point(aes(y=cumulativeDeaths))
??beeswarm
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeDeaths))
install.packages("beeswarm")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeDeaths))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeAdmissions))
final_state = readr::read_csv("~/tmp/test1/final-state.csv")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeAdmissions))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumPrevalence))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumIncidence))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumHospitalBurden))
final_state = readr::read_csv("~/tmp/test1/final-state.csv")
view(final_state)
summary = readr::read_csv("~/tmp/summary.csv")
ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeInfections, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=symptomaticCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=hospitalisedCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeDeaths, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=infectedCount/10000, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()+ylab("actual prevalence")
ggplot(summary,aes(x=time,y=averageMobility, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=averageCompliance, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=presumedTestPositivePrevalence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testNegativesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate/(testPositivesByResultDate+testNegativesByResultDate), colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=rtEffective, colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()+coord_cartesian(ylim=c(0,5))
ggplot(summary,aes(x=time,fill=as.factor(policy),colour=as.factor(policy),y=1))+geom_bar(stat="identity")+facet_wrap(~interaction(experimentName,experimentReplica))
summary %>% group_by(policy) %>% count()
summary = readr::read_csv("~/tmp/test1/summary.csv")
ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeInfections, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=symptomaticCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=hospitalisedCount, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=cumulativeDeaths, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=infectedCount/10000, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()+ylab("actual prevalence")
ggplot(summary,aes(x=time,y=averageMobility, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=averageCompliance, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=presumedTestPositivePrevalence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testNegativesByResultDate, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=testPositivesByResultDate/(testPositivesByResultDate+testNegativesByResultDate), colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()
ggplot(summary,aes(x=time,y=rtEffective, colour=experimentName, group=interaction(experimentName,experimentReplica)))+geom_line()+coord_cartesian(ylim=c(0,5))
ggplot(summary,aes(x=time,fill=as.factor(policy),colour=as.factor(policy),y=1))+geom_bar(stat="identity")+facet_wrap(~interaction(experimentName,experimentReplica))
summary %>% group_by(policy) %>% count()
ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line(alpha=0.1)
ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line(alpha=0.5)
ggplot(summary,aes(x=time,y=incidence, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line(alpha=0.25)
ggplot(summary,aes(x=time,y=cumulativeInfections, colour=experimentName, group=interaction(modelName,modelReplica,experimentName,experimentReplica)))+geom_line()
final_state = readr::read_csv("~/tmp/test1/final-state.csv")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumHospitalBurden))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumIncidence))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=30))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=30,vjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=30,vjust=0))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=30,hjust=0))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=30,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumHospitalBurden))+theme(axis.text.x = element_text(angle=15,hjust=1))
knitr::opts_chunk$set(echo = TRUE)
here::i_am("abm-output.qmd")
library(tidyverse)
library(gganimate)
# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))
final_state = readr::read_csv("~/tmp/test1/final-state.csv")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumHospitalBurden))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))+geom_hline(yintercept=128*128)
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))+geom_hline(yintercept=128*128,linetype="dashed")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeAdmissions))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeDeaths))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeMobilityDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeComplianceDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state %>% filter(cumulativeComplianceDecrease > 0),aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeComplianceDecrease))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumIncidence))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumPrevalence))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumHospitalBurden))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumIncidence))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=maximumPrevalence))+theme(axis.text.x = element_text(angle=15,hjust=1))
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))+geom_hline(yintercept=128*128,linetype="dashed")
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))+geom_hline(yintercept=128*128,linetype="dashed")+facet_wrap(~modelReplica)
ggplot(final_state,aes(x=experimentName))+ggdist::geom_swarm(aes(y=cumulativeInfections))+theme(axis.text.x = element_text(angle=15,hjust=1))+geom_hline(yintercept=128*128,linetype="dashed")
knitr::opts_chunk$set(echo = TRUE)
here::i_am("supporting-relationships.qmd")
library(tidyverse)
logit = function(p) {return(log(p/(1-p)))}
expit = function(x) {return(1/(1+exp(-x)))}
# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))
W = runif(1000)
M1 = rbeta(1000, 95, 5)
M2 = rbeta(1000, 95, 5)
C = rbinom(1000, 100, W*M1*M2)
density(C)
plot(density(C))
hist(C)
mob_base = sqrt(rbeta(1000, 5, 5))
# M1 and M2 are mobility baselines.
M1 = sqrt(rbeta(1000, 5, 5))
M2 = sqrt(rbeta(1000, 5, 5))
W = runif(1000)
C = rbinom(1000, 100, W*M1*M2)
hist(C)
# M1 and M2 are mobility baselines.
M1 = sqrt(rbeta(1000, 50, 50))
M2 = sqrt(rbeta(1000, 50, 50))
W = runif(1000)
C = rbinom(1000, 100, W*M1*M2)
hist(C)
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=M1*M2))+geom_density()
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C)+geom_density()+scale_x_log10()
ggplot(data,aes(x=C))+geom_density()+scale_x_log10()
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = rbeta(1000,1,2)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C))+geom_density()+scale_x_log10()
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = rbeta(1000,1,4)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C))+geom_density()+scale_x_log10()
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = rbeta(1000,1,10)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C))+geom_density()+scale_x_log10()
ggplot(data,aes(x=C))+geom_histogram(binwidth = 1)+scale_x_log10()
ggplot(data,aes(x=C))+geom_histogram(binwidth = 1)
ggplot(data,aes(x=C))+geom_bar()+scale_x_log10()
ggplot(data,aes(x=C))+geom_point()+scale_x_log10()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = rbeta(1000,1,1)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()+scale_y_log10()
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = rbeta(1000,1,10)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()+scale_y_log10()
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = rbeta(1000,1,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()+scale_y_log10()
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()+scale_y_log10()
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^2 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()+scale_y_log10()
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^3 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()+scale_y_log10()
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^2 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_log10()+scale_y_log10()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^3 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^0.5 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^1.5 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^1 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^1.5 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(1000, 5, 5)),
M2 = sqrt(rbeta(1000, 5, 5)),
W = runif(1000)^0.9 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(1000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(10000, 5, 5)),
M2 = sqrt(rbeta(10000, 5, 5)),
W = runif(10000)^0.9 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(10000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(100000, 5, 5)),
M2 = sqrt(rbeta(100000, 5, 5)),
W = runif(100000)^0.9 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(100000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
data = tibble(
M1 = sqrt(rbeta(100000, 5, 5)),
M2 = sqrt(rbeta(100000, 5, 5)),
W = runif(100000)^1 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(100000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
a = 4
b = a
data = tibble(
M1 = sqrt(rbeta(100000, a, b)),
M2 = sqrt(rbeta(100000, a, b)),
W = runif(100000)^1 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(100000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
a = 3
b = a
data = tibble(
M1 = sqrt(rbeta(100000, a, b)),
M2 = sqrt(rbeta(100000, a, b)),
W = runif(100000)^1 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(100000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
a = 10
b = a
data = tibble(
M1 = sqrt(rbeta(100000, a, b)),
M2 = sqrt(rbeta(100000, a, b)),
W = runif(100000)^1 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(100000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
# M1 and M2 are mobility baselines.
a = 10
b = a*2
data = tibble(
M1 = sqrt(rbeta(100000, a, b)),
M2 = sqrt(rbeta(100000, a, b)),
W = runif(100000)^1 #rbeta(1000,10,20)
) %>% mutate(
C = rbinom(100000, 100, W*M1*M2)
)
ggplot(data,aes(x=W*M1*M2))+geom_density()
ggplot(data,aes(x=C,y=))+geom_point(stat = "count",aes(y=after_stat(count)))+scale_x_continuous(trans="log1p")+scale_y_continuous(trans="log1p")
linelist = readr::read_csv("~/tmp/linelist.csv")
tmp = linelist %>% group_by(contactCount,modelName,experimentName) %>% count()
ggplot(tmp,aes(x=contactCount, y=n/sum(n),colour=experimentName, group=interaction(modelName,experimentName) )) + geom_line() + scale_x_continuous(trans="log1p") + scale_y_continuous(trans="log1p")
(2^31-1)/1024/1024/1024
