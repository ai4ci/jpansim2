---
title: "Supporting relationships"
author: "Rob Challen"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
here::i_am("supporting-relationships.qmd")
library(tidyverse)

logit = function(p) {return(log(p/(1-p)))}
expit = function(x) {return(1/(1+exp(-x)))}

# install.packages(
#   c("odin","odin.dust","dust"),
#   repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))

```

# Supporting rationale

## Signal to noise, sensitivity and specificiy

Viral load is normalised so that a value of 1 is infected and should be
detected at the sensitivity and specificity of the tests. This is to do
with the ease of separating signal from noise. The noise distribution 
upper quantile at a test cut off must be equal to specificity.
at the same test cut off the lower quantile of the signal distribution must
be equal to sensitivity. 

Problem is we don;t know anything about the signal distribution. and it 
is somewhat arbitrary because it is a circular definition, if we impose
a cut-off. This comes down to
how we normalise viral load. 

A cut off of 1 has to be designed that 
noise distribution quantile (spec)% is 1, and 1+noise distribution quantile
is (1-sens)% at 1. If we assume a uniform distributed additive noise 
function we can phrase this in 

$$
E \sim Uniform(min,max) \\
P(E \geq 1) = specificity \\
P(1+E \leq 1) = 1-sensitivity \\
P(E \leq 0) = 1-sensitivity \\
$$

I.e. the (1-sensitivity)% quantile is 0 and the (specificity)% quantile is 1. 
The CDF of this Uniform distribution is a linear function with gradient and 
intercept:

$$

CDF(x) = (specificity + sensitivity - 1) \times x + (1-sensitivity) \\

CDF(min) = 0 \\
(specificity + sensitivity - 1) \times min + (1-sensitivity) = 0 \\
min = \frac{sensitivity-1}{specificity + sensitivity - 1} \\

CDF(max) = 1 \\
(specificity + sensitivity - 1) \times max + (1-sensitivity) = 1 \\
max = \frac{sensitivity}{specificity + sensitivity - 1}

$$

```{r}

sensitivity = 0.8
specificity = 0.95

min = (sensitivity-1)/(specificity + sensitivity - 1) 
max = (sensitivity)/(specificity + sensitivity - 1)

# sens
sum(runif(10000,min,max)+1 > 1)/10000

# spec
sum(runif(10000,min,max) < 1)/10000
```

Easier to transform a 0,1 Uniform using sensitivity and specificity

```{r}

noise = (runif(10000)-(1-sensitivity)) / (sensitivity+specificity-1)

# sens 
sum(1 + noise > 1)/10000

# spec
sum( noise < 1)/10000

```


## Conversions

rate to probability
	
$$
p = 1-e^{-rate}\\
rate = -ln(1-p)
$$

```{r}
p = 0.1 #seq(0,1,0.1)
rate = -log(1-p)

p2 = 1-exp(-rate*c(1,2,4,8,16))
rate2 = -log(1-p2)

rate2/rate

```


$$

period \\
0.5 = p^{period} \\
log(0.5) = period \times log(p) \\
p = e^\frac{log(0.5)}{period}

$$


```{r}
# half life
period = 7
p = exp(log(0.5)/period)
p^7
```

# Scaling probabilities

```{r}


OR = 2
p = seq(0.1,0.9,0.1)

scaled_p = expit(logit(p) + log(OR))

# scaled_p2 = 1-((1-p)^OR)

p/(1-p)
scaled_p/(1-scaled_p)
# scaled_p2/(1-scaled_p2)
```

```{r}
# If we need to reduce the effect of a modifier on the logit scale we can simply
# multiply by the factor. This is equivalent to multiplying the 
# odds by the (odds_ratio ^ factor)

# if this is a number of days then a 1/(1+period) is going to be the factor
# we use 

b = expit(logit(0.01) + seq(-1,1,0.1))

a = expit(logit(0.01) + seq(-1,1,0.1) * 0.5)

```

### Logit normal distributions.

Standard deviation of logit normal distribution is not easy to specify
It would be useful to parametrise using mean and SD. There is a simple relationship
between median and mu. scale parameter not so easy though.

```{r}
median = seq(0.025,0.975,0.05)
scale = 0.1
mu = logit(median);
#sigma = scale*(exp((abs(mu)^(3/4))))

sigma = scale*(2+(abs(mu)^(7/4)))

tmp = bind_rows(lapply(seq_along(mu), \(i) tibble::tibble(
  q = seq(0.01,0.99,0.01),
  x = expit(qnorm(p = seq(0.01,0.99,0.01))*sigma[i]+mu[i]),
  p = (q-lag(q))/(x-lag(x)),
  median = expit(mu[i])          
)))

ggplot(tmp,aes(x=x,y=p,colour=as.factor(median)))+geom_line()

tmp2 = tmp %>% group_by(median) %>%
  mutate(dx=x-lag(x)) %>%
  summarise(
    mean = sum(x*p*dx,na.rm = TRUE),
    sd = sum((x-mean)^2*p*dx,na.rm = TRUE)
  )

ggplot(tmp2,aes(x=median,y=mean))+geom_point()
ggplot(tmp2,aes(x=median,y=sd))+geom_point()
```



## Convex Beta distributions

Mode if alpha and beta are >1 otherwise turns into u shaped distribution

$$
\alpha = (\frac{\mu(1-\mu)}{\sigma^2}-1) \mu \\
\beta = (\frac{\mu(1-\mu)}{\sigma^2}-1) (1-\mu) \\
$$

$$

1 < (\frac{\mu(1-\mu)}{\sigma^2}-1) \mu \\
\frac{1}{\mu}+1 < \frac{\mu(1-\mu)}{\sigma^2} \\
\frac{1+\mu}{\mu} < \frac{\mu(1-\mu)}{\sigma^2} \\
\sigma^2 < \mu^2\frac{1-\mu}{1+\mu} \\

$$

$$

1 < (\frac{\mu(1-\mu)}{\sigma^2}-1) (1-\mu) \\
\frac{1}{1-\mu}+1 < \frac{\mu(1-\mu)}{\sigma^2}  \\
\frac{2-\mu}{1-\mu} < \frac{\mu(1-\mu)}{\sigma^2}  \\
{\sigma^2} < (1-\mu)^2\frac{\mu}{2-\mu} \\
$$



```{r}

mu = 0.995

sigma = sqrt(pmin(
  mu^2*(1-mu)/(1+mu),
  (1-mu)^2*(mu)/(2-mu)
))

# regardless of mu one of alpha or beta should be equal to 1.

alpha = (mu*(1-mu) / sigma^2 -1) * mu
beta = (mu*(1-mu) / sigma^2 -1) * (1-mu)

```



# Log likelihood ratio and multiple tests / symptoms

```{r}

tests = tribble(
  ~test, ~sens, ~spec, ~obs_neg, ~delay_fn,
  "PCR", 0.95, 0.99, TRUE, \(t) max(0,(10-t)/10),
  "LFT", 0.8, 0.95, FALSE, \(t) max(0,(5-t)/5),
  "SYMPTOMS", 0.5, 0.8, FALSE, \(t) exp(-t/2)
)

tests = tests %>% mutate(
  log_LR_pos = log(sens / (1-spec)),
  log_LR_neg = log((1-sens) / spec)
)

person = tribble(
  ~time, ~test, ~result,
  0, "PCR", TRUE,
  1, "LFT", TRUE,
  5, "LFT", FALSE,
  0, "SYMPTOMS", TRUE,
  1, "SYMPTOMS", TRUE,
  3, "SYMPTOMS", FALSE
)

person = person %>% inner_join(tests, by="test") %>%
  mutate(
    time_coeff = purrr::map2_dbl(delay_fn,time, ~.x(.y)),
    log_LR = ifelse(result, log_LR_pos, log_LR_neg),
    log_LR2 = ifelse(result, log_LR_pos, log_LR_neg*obs_neg),
    adj_log_LR = time_coeff * log_LR,
    adj_log_LR2 = time_coeff * log_LR2,
  )

prevalence = c(0.001,0.01,0.1)

person %>% crossing(prevalence) %>%
  group_by(prevalence) %>%
  summarise(
    log_LR = sum(log_LR),
    log_LR2 = sum(log_LR2),
    adj_log_LR = sum(adj_log_LR),
    adj_log_LR2 = sum(adj_log_LR2)
  ) %>%
  mutate(
    posterior = expit(logit(prevalence)+log_LR),
    posterior2 = expit(logit(prevalence)+log_LR2),
    adj_posterior = expit(logit(prevalence)+adj_log_LR),
    adj_posterior2 = expit(logit(prevalence)+adj_log_LR2)
  )

```

# Contact matrices



```{r}
partic = readr::read_csv("https://zenodo.org/records/6542524/files/CoMix_uk_participant_common.csv?download=1")
comix = readr::read_csv("https://zenodo.org/records/6542524/files/CoMix_uk_contact_common.csv?download=1")
```

```{r}
partic = partic %>% mutate(
  part_age_min = as.numeric(stringr::str_extract(part_age, "([0-9]+)-([0-9]+)", 1)),
  part_age_max = as.numeric(stringr::str_extract(part_age, "([0-9]+)-([0-9]+)", 2))
)

agediff = comix %>% inner_join(partic, by="part_id") %>% mutate(
  min_age_diff = pmin(part_age_min - cnt_age_est_max, part_age_max - cnt_age_est_min),
  max_age_diff = pmax(part_age_min - cnt_age_est_max, part_age_max - cnt_age_est_min),
  # mid_age_diff = ((part_age_min - cnt_age_est_max)+(part_age_max - cnt_age_est_min))/2
  mid_age_diff = abs((part_age_min+part_age_max)/2 - (cnt_age_est_max+cnt_age_est_min)/2)
) %>% glimpse()

ggplot(agediff)+
  geom_histogram(aes(x=abs(mid_age_diff)), colour="red",binwidth = 1)#+

ggplot(agediff)+
  geom_density(aes(x=abs(mid_age_diff)), colour="red")

  # geom_histogram(aes(x=max_age_diff), colour="blue",binwidth = 5)+
  # geom_histogram(aes(x=(min_age_diff+max_age_diff)/2), colour="magenta",binwidth = 5)
```



```{r}

f_gen = function(a,b,c,d) {
  tmp = function(x) (a+cos(2*pi*(x/c)^d)) / ((a+1)*(b*(x/c)^2+1))
  total = integrate(tmp,0,100)$value
  print(total)
  return(function(x) return(tmp(x)/total))
}

ggplot(agediff)+
  geom_density(aes(x=abs(mid_age_diff)), colour="red")+
  geom_function(fun = f_gen(1.2,0.25,6.25,0.8))+xlim(0,80)


sapply(0:100, function(x) integrate(f_gen(1.2,0.25,6.25,0.8),0,x)$value)

f = f_gen(1.2,0.25,6.25,0.8)

x = tibble(
  agediff = 0:100,
  p = f(0:100)
) %>% mutate(
  rr = p/mean(p)
)

mean(x$p)


```

Probability of 

```{r}
cum = sapply(1:100, function(x) sum(na.omit(agediff$mid_age_diff)<x))

cdf = tibble(
  diff=1:100,
  cdf = cum/max(cum)
)


g_gen = function(a,b,c,d) {
  return(function(x) 1-exp(-x/a)*(1+1/b*sin(2*pi*x^d/c)^2))
}

g = g_gen(20,10,13,0.9)
g(1)

ggplot(cdf,aes(x=diff,y=cdf))+
  geom_line()+
  geom_function(fun = g_gen(19,8,11,0.85), colour="red")+xlim(0,80)
  

```


```{r}

cdf_gen = function(a,b,c,d) {
  return(function(x) a*tan((x+c*(1-x^2)*cos(b*pi/2*x^d))*atan(75/a)))
}

ggplot(cdf,aes(x=cdf,y=diff))+
  geom_line()+
  geom_function(fun = cdf_gen(18,23,0.03,3.5), colour="red")+xlim(0,1)

```




```{r}
library(reshape2)
library(dplyr)
library(ggplot2)
opt=theme(legend.position="none",
          panel.background = element_rect(fill="white"),
          panel.grid=element_blank(),
          axis.ticks=element_blank(),
          axis.title=element_blank(),
          axis.text=element_blank())
hilbert = function(m,n,r) {
  for (i in 1:n)
  {
    tmp=cbind(t(m), m+nrow(m)^2)
    m=rbind(tmp, (2*nrow(m))^r-tmp[nrow(m):1,]+1)
  }
  melt(m) %>% plyr::rename(c("Var1" = "x", "Var2" = "y", "value"="order")) %>% arrange(order)}
# Original
ggplot(hilbert(m=matrix(1), n=1, r=2), aes(x, y)) + geom_path()+ opt
ggplot(hilbert(m=matrix(1), n=2, r=2), aes(x, y)) + geom_path()+ opt
ggplot(hilbert(m=matrix(1), n=3, r=2), aes(x, y)) + geom_path()+ opt
ggplot(hilbert(m=matrix(1), n=4, r=2), aes(x, y)) + geom_path()+ opt
ggplot(hilbert(m=matrix(1), n=5, r=2), aes(x, y)) + geom_path()+ opt
ggplot(hilbert(m=matrix(1), n=6, r=2), aes(x, y)) + geom_path()+ opt
# # Changing order
# ggplot(hilbert(m=matrix(.5), n=5, r=2), aes(x, y)) + geom_path()+ opt
# ggplot(hilbert(m=matrix(0), n=5, r=2), aes(x, y)) + geom_path()+ opt
# ggplot(hilbert(m=matrix(tan(1)), n=5, r=2), aes(x, y)) + geom_path()+ opt
# ggplot(hilbert(m=matrix(3), n=5, r=2), aes(x, y)) + geom_path()+ opt
# ggplot(hilbert(m=matrix(-1), n=5, r=2), aes(x, y)) + geom_path()+ opt
# ggplot(hilbert(m=matrix(log(.1)), n=5, r=2), aes(x, y)) + geom_path()+ opt
# ggplot(hilbert(m=matrix(-15), n=5, r=2), aes(x, y)) + geom_path()+ opt
# ggplot(hilbert(m=matrix(-0.001), n=5, r=2), aes(x, y)) + geom_path()+ opt
# # Polygons
# ggplot(hilbert(m=matrix(log(1)), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(.5), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(tan(1)), n=5, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-15), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-25), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(0), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(1000000), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-1), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-.00001), n=4, r=2), aes(x, y)) + geom_polygon()+ opt
# # Changing exponent
# gplot(hilbert(m=matrix(log(1)), n=4, r=-1), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(.5), n=4, r=-2), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(tan(1)), n=4, r=6), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-15), n=3, r=sin(2)), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-25), n=4, r=-.0001), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(0), n=4, r=200), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(1000000), n=3, r=.5), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-1), n=4, r=sqrt(2)), aes(x, y)) + geom_polygon()+ opt
# ggplot(hilbert(m=matrix(-.00001), n=4, r=52), aes(x, y)) + geom_polygon()+ opt
# # Polar coordinates
# ggplot(hilbert(m=matrix(1), n=4, r=2), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(-1), n=5, r=2), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(.1), n=2, r=.5), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(1000000), n=2, r=.1), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(.25), n=3, r=3), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(tan(1)), n=5, r=1), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(1), n=4, r=1), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(log(1)), n=3, r=sin(2)), aes(x, y)) + geom_polygon()+ coord_polar()+opt
# ggplot(hilbert(m=matrix(-.0001), n=4, r=25), aes(x, y)) + geom_polygon()+ coord_polar()+opt

```